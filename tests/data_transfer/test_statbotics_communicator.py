from data_transfer import statbotics_communicator
from unittest.mock import *
import pytest


def test_sb_get_team():
    sampleoutput1 = {
        "team": 254,
        "name": "The Cheesy Poofs",
        "offseason": False,
        "state": "CA",
        "country": "USA",
        "district": None,
        "rookie_year": 1999,
        "active": True,
        "norm_epa": 2014.0,
        "norm_epa_recent": 1969.0,
        "norm_epa_mean": 1905.0,
        "norm_epa_max": 2114.0,
        "wins": 806,
        "losses": 158,
        "ties": 7,
        "count": 971,
        "winrate": 0.8337,
        "full_wins": 1035,
        "full_losses": 233,
        "full_ties": 7,
        "full_count": 1275,
        "full_winrate": 0.8145,
    }
    sampleoutput2 = {
        "team": 1678,
        "name": "Citrus Circuits",
        "offseason": False,
        "state": "CA",
        "country": "USA",
        "district": None,
        "rookie_year": 2005,
        "active": True,
        "norm_epa": 1950.0,
        "norm_epa_recent": 1914.0,
        "norm_epa_mean": 1794.0,
        "norm_epa_max": 2015.0,
        "wins": 634,
        "losses": 129,
        "ties": 5,
        "count": 768,
        "winrate": 0.8288,
        "full_wins": 1001,
        "full_losses": 219,
        "full_ties": 7,
        "full_count": 1227,
        "full_winrate": 0.8187,
    }
    test_sb = Mock()
    test_sb.get_team = MagicMock(return_value=sampleoutput1)
    assert statbotics_communicator.sb_get_team(254, sb=test_sb) == sampleoutput1
    test_sb.get_team = MagicMock(return_value=sampleoutput2)
    assert statbotics_communicator.sb_get_team(1678, sb=test_sb) == sampleoutput2


def test_sb_get_teams():
    sampleoutput1 = [
        {
            "team": 4,
            "name": "Team 4 ELEMENT",
            "offseason": False,
            "state": "CA",
            "country": "USA",
            "district": None,
            "rookie_year": 1997,
            "active": True,
            "norm_epa": 1560.0,
            "norm_epa_recent": 1554.0,
            "norm_epa_mean": 1517.0,
            "norm_epa_max": 1586.0,
            "wins": 188,
            "losses": 229,
            "ties": 15,
            "count": 432,
            "winrate": 0.4525,
            "full_wins": 243,
            "full_losses": 311,
            "full_ties": 18,
            "full_count": 572,
            "full_winrate": 0.4406,
        },
        {
            "team": 8,
            "name": "Paly Robotics",
            "offseason": False,
            "state": "CA",
            "country": "USA",
            "district": None,
            "rookie_year": 1996,
            "active": True,
            "norm_epa": 1621.0,
            "norm_epa_recent": 1644.0,
            "norm_epa_mean": 1540.0,
            "norm_epa_max": 1776.0,
            "wins": 273,
            "losses": 267,
            "ties": 9,
            "count": 549,
            "winrate": 0.5055,
            "full_wins": 364,
            "full_losses": 356,
            "full_ties": 13,
            "full_count": 733,
            "full_winrate": 0.5055,
        },
        {
            "team": 100,
            "name": "The WildHats",
            "offseason": False,
            "state": "CA",
            "country": "USA",
            "district": None,
            "rookie_year": 1995,
            "active": True,
            "norm_epa": 1559.0,
            "norm_epa_recent": 1537.0,
            "norm_epa_mean": 1552.0,
            "norm_epa_max": 1810.0,
            "wins": 285,
            "losses": 282,
            "ties": 8,
            "count": 575,
            "winrate": 0.5026,
            "full_wins": 371,
            "full_losses": 362,
            "full_ties": 9,
            "full_count": 742,
            "full_winrate": 0.5061,
        },
        {
            "team": 114,
            "name": "Eaglestrike",
            "offseason": False,
            "state": "CA",
            "country": "USA",
            "district": None,
            "rookie_year": 1997,
            "active": True,
            "norm_epa": 1734.0,
            "norm_epa_recent": 1662.0,
            "norm_epa_mean": 1579.0,
            "norm_epa_max": 1740.0,
            "wins": 325,
            "losses": 266,
            "ties": 13,
            "count": 604,
            "winrate": 0.5488,
            "full_wins": 463,
            "full_losses": 365,
            "full_ties": 14,
            "full_count": 842,
            "full_winrate": 0.5582,
        },
        {
            "team": 115,
            "name": "MVRT",
            "offseason": False,
            "state": "CA",
            "country": "USA",
            "district": None,
            "rookie_year": 1998,
            "active": True,
            "norm_epa": 1647.0,
            "norm_epa_recent": 1683.0,
            "norm_epa_mean": 1585.0,
            "norm_epa_max": 1784.0,
            "wins": 325,
            "losses": 270,
            "ties": 5,
            "count": 600,
            "winrate": 0.5458,
            "full_wins": 399,
            "full_losses": 372,
            "full_ties": 8,
            "full_count": 779,
            "full_winrate": 0.5173,
        },
        {
            "team": 192,
            "name": "GRT",
            "offseason": False,
            "state": "CA",
            "country": "USA",
            "district": None,
            "rookie_year": 1997,
            "active": True,
            "norm_epa": 1539.0,
            "norm_epa_recent": 1517.0,
            "norm_epa_mean": 1574.0,
            "norm_epa_max": 1704.0,
            "wins": 371,
            "losses": 308,
            "ties": 14,
            "count": 693,
            "winrate": 0.5455,
            "full_wins": 376,
            "full_losses": 322,
            "full_ties": 14,
            "full_count": 712,
            "full_winrate": 0.5379,
        },
        {
            "team": 199,
            "name": "Deep Blue",
            "offseason": False,
            "state": "CA",
            "country": "USA",
            "district": None,
            "rookie_year": 1998,
            "active": True,
            "norm_epa": 1525.0,
            "norm_epa_recent": 1531.0,
            "norm_epa_mean": 1506.0,
            "norm_epa_max": 1573.0,
            "wins": 58,
            "losses": 72,
            "ties": 0,
            "count": 130,
            "winrate": 0.4462,
            "full_wins": 111,
            "full_losses": 122,
            "full_ties": 0,
            "full_count": 233,
            "full_winrate": 0.4764,
        },
        {
            "team": 253,
            "name": "Boba Bots",
            "offseason": False,
            "state": "CA",
            "country": "USA",
            "district": None,
            "rookie_year": 1999,
            "active": True,
            "norm_epa": 1488.0,
            "norm_epa_recent": 1523.0,
            "norm_epa_mean": 1451.0,
            "norm_epa_max": 1633.0,
            "wins": 102,
            "losses": 161,
            "ties": 4,
            "count": 267,
            "winrate": 0.3895,
            "full_wins": 149,
            "full_losses": 228,
            "full_ties": 7,
            "full_count": 384,
            "full_winrate": 0.3971,
        },
        {
            "team": 254,
            "name": "The Cheesy Poofs",
            "offseason": False,
            "state": "CA",
            "country": "USA",
            "district": None,
            "rookie_year": 1999,
            "active": True,
            "norm_epa": 2014.0,
            "norm_epa_recent": 1969.0,
            "norm_epa_mean": 1905.0,
            "norm_epa_max": 2114.0,
            "wins": 806,
            "losses": 158,
            "ties": 7,
            "count": 971,
            "winrate": 0.8337,
            "full_wins": 1035,
            "full_losses": 233,
            "full_ties": 7,
            "full_count": 1275,
            "full_winrate": 0.8145,
        },
        {
            "team": 294,
            "name": "Beach Cities Robotics",
            "offseason": False,
            "state": "CA",
            "country": "USA",
            "district": None,
            "rookie_year": 1999,
            "active": True,
            "norm_epa": 1634.0,
            "norm_epa_recent": 1674.0,
            "norm_epa_mean": 1599.0,
            "norm_epa_max": 1822.0,
            "wins": 374,
            "losses": 280,
            "ties": 13,
            "count": 667,
            "winrate": 0.5705,
            "full_wins": 425,
            "full_losses": 334,
            "full_ties": 14,
            "full_count": 773,
            "full_winrate": 0.5589,
        },
    ]
    sampleoutput2 = [
        {
            "team": 22,
            "name": "Double Deuce",
            "offseason": False,
            "state": "CA",
            "country": "USA",
            "district": None,
            "rookie_year": 1997,
            "active": False,
            "norm_epa": 1526.0,
            "norm_epa_recent": None,
            "norm_epa_mean": 1573.0,
            "norm_epa_max": 1641.0,
            "wins": 66,
            "losses": 53,
            "ties": 1,
            "count": 120,
            "winrate": 0.5542,
            "full_wins": 66,
            "full_losses": 53,
            "full_ties": 1,
            "full_count": 120,
            "full_winrate": 0.5542,
        },
        {
            "team": 207,
            "name": "METALCRAFTERS",
            "offseason": False,
            "state": "CA",
            "country": "USA",
            "district": None,
            "rookie_year": 1999,
            "active": False,
            "norm_epa": 1447.0,
            "norm_epa_recent": 1539.0,
            "norm_epa_mean": 1568.0,
            "norm_epa_max": 1730.0,
            "wins": 249,
            "losses": 219,
            "ties": 10,
            "count": 478,
            "winrate": 0.5314,
            "full_wins": 249,
            "full_losses": 219,
            "full_ties": 10,
            "full_count": 478,
            "full_winrate": 0.5314,
        },
        {
            "team": 255,
            "name": "Team 255",
            "offseason": False,
            "state": "CA",
            "country": "USA",
            "district": None,
            "rookie_year": 1999,
            "active": False,
            "norm_epa": 1453.0,
            "norm_epa_recent": None,
            "norm_epa_mean": 1453.0,
            "norm_epa_max": 1453.0,
            "wins": 2,
            "losses": 6,
            "ties": 1,
            "count": 9,
            "winrate": 0.2778,
            "full_wins": 2,
            "full_losses": 6,
            "full_ties": 1,
            "full_count": 9,
            "full_winrate": 0.2778,
        },
        {
            "team": 256,
            "name": "Robo-Rams",
            "offseason": False,
            "state": "CA",
            "country": "USA",
            "district": None,
            "rookie_year": 1999,
            "active": False,
            "norm_epa": 1444.0,
            "norm_epa_recent": 1444.0,
            "norm_epa_mean": 1484.0,
            "norm_epa_max": 1588.0,
            "wins": 103,
            "losses": 132,
            "ties": 7,
            "count": 242,
            "winrate": 0.4401,
            "full_wins": 134,
            "full_losses": 164,
            "full_ties": 7,
            "full_count": 305,
            "full_winrate": 0.4508,
        },
        {
            "team": 258,
            "name": "Sea Dawgs",
            "offseason": False,
            "state": "CA",
            "country": "USA",
            "district": None,
            "rookie_year": 1999,
            "active": False,
            "norm_epa": 1418.0,
            "norm_epa_recent": None,
            "norm_epa_mean": 1491.0,
            "norm_epa_max": 1543.0,
            "wins": 14,
            "losses": 16,
            "ties": 1,
            "count": 31,
            "winrate": 0.4677,
            "full_wins": 14,
            "full_losses": 16,
            "full_ties": 1,
            "full_count": 31,
            "full_winrate": 0.4677,
        },
        {
            "team": 259,
            "name": "LABRATs",
            "offseason": False,
            "state": "CA",
            "country": "USA",
            "district": None,
            "rookie_year": 1999,
            "active": False,
            "norm_epa": 1483.0,
            "norm_epa_recent": None,
            "norm_epa_mean": 1497.0,
            "norm_epa_max": 1552.0,
            "wins": 10,
            "losses": 10,
            "ties": 1,
            "count": 21,
            "winrate": 0.5,
            "full_wins": 10,
            "full_losses": 10,
            "full_ties": 1,
            "full_count": 21,
            "full_winrate": 0.5,
        },
        {
            "team": 295,
            "name": "Grizzly Robotics Team",
            "offseason": False,
            "state": "CA",
            "country": "USA",
            "district": None,
            "rookie_year": 1999,
            "active": False,
            "norm_epa": 1508.0,
            "norm_epa_recent": None,
            "norm_epa_mean": 1536.0,
            "norm_epa_max": 1660.0,
            "wins": 172,
            "losses": 166,
            "ties": 6,
            "count": 344,
            "winrate": 0.5087,
            "full_wins": 190,
            "full_losses": 198,
            "full_ties": 7,
            "full_count": 395,
            "full_winrate": 0.4899,
        },
        {
            "team": 298,
            "name": "Team 298",
            "offseason": False,
            "state": "CA",
            "country": "USA",
            "district": None,
            "rookie_year": 1999,
            "active": False,
            "norm_epa": 1620.0,
            "norm_epa_recent": None,
            "norm_epa_mean": 1620.0,
            "norm_epa_max": 1620.0,
            "wins": 8,
            "losses": 4,
            "ties": 0,
            "count": 12,
            "winrate": 0.6667,
            "full_wins": 8,
            "full_losses": 4,
            "full_ties": 0,
            "full_count": 12,
            "full_winrate": 0.6667,
        },
        {
            "team": 299,
            "name": "Valkyrie Robotics",
            "offseason": False,
            "state": "CA",
            "country": "USA",
            "district": None,
            "rookie_year": 1998,
            "active": False,
            "norm_epa": 1411.0,
            "norm_epa_recent": 1481.0,
            "norm_epa_mean": 1464.0,
            "norm_epa_max": 1553.0,
            "wins": 46,
            "losses": 70,
            "ties": 2,
            "count": 118,
            "winrate": 0.3983,
            "full_wins": 85,
            "full_losses": 101,
            "full_ties": 2,
            "full_count": 188,
            "full_winrate": 0.4574,
        },
        {
            "team": 330,
            "name": "The Beach Bots",
            "offseason": False,
            "state": "CA",
            "country": "USA",
            "district": None,
            "rookie_year": 1999,
            "active": False,
            "norm_epa": 1817.0,
            "norm_epa_recent": 1817.0,
            "norm_epa_mean": 1774.0,
            "norm_epa_max": 2008.0,
            "wins": 566,
            "losses": 165,
            "ties": 14,
            "count": 745,
            "winrate": 0.7691,
            "full_wins": 693,
            "full_losses": 226,
            "full_ties": 15,
            "full_count": 934,
            "full_winrate": 0.75,
        },
    ]
    test_sb = Mock()
    test_sb.get_teams = MagicMock(return_value=sampleoutput1)
    assert (
        statbotics_communicator.sb_get_teams(
            None, "California", None, True, "team", None, 10, sb=test_sb
        )
        == sampleoutput1
    )
    test_sb.get_teams = MagicMock(return_value=sampleoutput2)
    assert (
        statbotics_communicator.sb_get_teams(
            None, "California", None, False, "team", None, 10, sb=test_sb
        )
        == sampleoutput2
    )


def test_sb_get_year():
    sampleoutput1 = {
        "year": 2023,
        "epa_max": 86.7,
        "epa_1p": 62.34,
        "epa_5p": 52.86,
        "epa_10p": 46.85,
        "epa_25p": 35.27,
        "epa_median": 24.28,
        "epa_75p": 17.27,
        "epa_mean": 27.22,
        "epa_sd": 13.25,
        "auto_epa_max": 22.42,
        "auto_epa_1p": 17.31,
        "auto_epa_5p": 14.92,
        "auto_epa_10p": 13.56,
        "auto_epa_25p": 10.85,
        "auto_epa_median": 7.55,
        "auto_epa_75p": 4.69,
        "auto_epa_mean": 7.87,
        "auto_epa_sd": 4.11,
        "teleop_epa_max": 55.23,
        "teleop_epa_1p": 37.73,
        "teleop_epa_5p": 30.93,
        "teleop_epa_10p": 26.03,
        "teleop_epa_25p": 17.96,
        "teleop_epa_median": 10.85,
        "teleop_epa_75p": 6.74,
        "teleop_epa_mean": 13.14,
        "teleop_epa_sd": 8.78,
        "endgame_epa_max": 12.79,
        "endgame_epa_1p": 11.11,
        "endgame_epa_5p": 9.7,
        "endgame_epa_10p": 8.94,
        "endgame_epa_25p": 7.78,
        "endgame_epa_median": 6.34,
        "endgame_epa_75p": 4.69,
        "endgame_epa_mean": 6.21,
        "endgame_epa_sd": 2.26,
        "rp_1_epa_max": 1.0744,
        "rp_1_epa_1p": 0.7606,
        "rp_1_epa_5p": 0.4898,
        "rp_1_epa_10p": 0.3765,
        "rp_1_epa_25p": 0.1385,
        "rp_1_epa_median": -0.0638,
        "rp_1_epa_75p": -0.1734,
        "rp_1_epa_mean": 0.012,
        "rp_1_epa_sd": 0.2409,
        "rp_2_epa_max": 0.7927,
        "rp_2_epa_1p": 0.5982,
        "rp_2_epa_5p": 0.4827,
        "rp_2_epa_10p": 0.4247,
        "rp_2_epa_25p": 0.3139,
        "rp_2_epa_median": 0.1817,
        "rp_2_epa_75p": 0.0645,
        "rp_2_epa_mean": 0.1904,
        "rp_2_epa_sd": 0.1732,
        "epa_quals_acc": 0.7593,
        "epa_quals_mse": 0.1574,
        "quals_count": 13538,
        "epa_elims_acc": 0.7239,
        "epa_elims_mse": 0.1756,
        "elims_count": 2778,
        "epa_champs_acc": 0.7302,
        "epa_champs_mse": 0.1669,
        "champs_count": 1175,
        "epa_acc": 0.7532,
        "epa_mse": 0.1605,
        "count": 16316,
        "rp_1_acc": 0.8477,
        "rp_1_mse": 0.1115,
        "rp_1_champs_acc": 0.7478,
        "rp_1_champs_mse": 0.1727,
        "rp_2_acc": 0.6712,
        "rp_2_mse": 0.2122,
        "rp_2_champs_acc": 0.7594,
        "rp_2_champs_mse": 0.1809,
        "rp_champs_count": 2070,
        "rp_count": 27076,
        "score_mean": 74.59,
        "score_sd": 29.36,
        "auto_mean": 19.52,
        "teleop_mean": 32.69,
        "endgame_mean": 18.12,
        "fouls_mean": 4.36,
        "no_fouls_mean": 70.33,
        "rp_1_mean": 0.03,
        "rp_2_mean": 0.38,
    }
    sampleoutput2 = {
        "year": 2022,
        "epa_max": 73.27,
        "epa_1p": 49.72,
        "epa_5p": 36.98,
        "epa_10p": 30.48,
        "epa_25p": 20.89,
        "epa_median": 13.3,
        "epa_75p": 8.13,
        "epa_mean": 15.69,
        "epa_sd": 10.72,
        "auto_epa_max": 16.87,
        "auto_epa_1p": 13.67,
        "auto_epa_5p": 10.44,
        "auto_epa_10p": 8.81,
        "auto_epa_25p": 6.43,
        "auto_epa_median": 4.27,
        "auto_epa_75p": 2.8,
        "auto_epa_mean": 4.87,
        "auto_epa_sd": 2.89,
        "teleop_epa_max": 45.21,
        "teleop_epa_1p": 28.21,
        "teleop_epa_5p": 18.7,
        "teleop_epa_10p": 13.6,
        "teleop_epa_25p": 8.16,
        "teleop_epa_median": 4.35,
        "teleop_epa_75p": 2.26,
        "teleop_epa_mean": 6.12,
        "teleop_epa_sd": 6.11,
        "endgame_epa_max": 15.95,
        "endgame_epa_1p": 13.53,
        "endgame_epa_5p": 11.7,
        "endgame_epa_10p": 10.28,
        "endgame_epa_25p": 7.03,
        "endgame_epa_median": 4.01,
        "endgame_epa_75p": 2.04,
        "endgame_epa_mean": 4.71,
        "endgame_epa_sd": 3.63,
        "rp_1_epa_max": 1.0971,
        "rp_1_epa_1p": 0.8677,
        "rp_1_epa_5p": 0.5839,
        "rp_1_epa_10p": 0.4421,
        "rp_1_epa_25p": 0.1873,
        "rp_1_epa_median": 0.0073,
        "rp_1_epa_75p": -0.0872,
        "rp_1_epa_mean": 0.0827,
        "rp_1_epa_sd": 0.24,
        "rp_2_epa_max": 0.7984,
        "rp_2_epa_1p": 0.6453,
        "rp_2_epa_5p": 0.5117,
        "rp_2_epa_10p": 0.4315,
        "rp_2_epa_25p": 0.2785,
        "rp_2_epa_median": 0.0989,
        "rp_2_epa_75p": -0.0207,
        "rp_2_epa_mean": 0.1353,
        "rp_2_epa_sd": 0.2049,
        "epa_quals_acc": 0.7703,
        "epa_quals_mse": 0.1497,
        "quals_count": 12048,
        "epa_elims_acc": 0.7951,
        "epa_elims_mse": 0.1406,
        "elims_count": 2597,
        "epa_champs_acc": 0.7664,
        "epa_champs_mse": 0.1465,
        "champs_count": 869,
        "epa_acc": 0.7747,
        "epa_mse": 0.1481,
        "count": 14645,
        "rp_1_acc": 0.8138,
        "rp_1_mse": 0.1288,
        "rp_1_champs_acc": 0.8624,
        "rp_1_champs_mse": 0.0996,
        "rp_2_acc": 0.7295,
        "rp_2_mse": 0.1801,
        "rp_2_champs_acc": 0.7917,
        "rp_2_champs_mse": 0.156,
        "rp_champs_count": 1512,
        "rp_count": 24096,
        "score_mean": 41.41,
        "score_sd": 22.07,
        "auto_mean": 11.65,
        "teleop_mean": 15.66,
        "endgame_mean": 11.71,
        "fouls_mean": 2.42,
        "no_fouls_mean": 39.02,
        "rp_1_mean": 0.12,
        "rp_2_mean": 0.23,
    }
    test_sb = Mock()
    test_sb.get_year = MagicMock(return_value=sampleoutput1)
    assert statbotics_communicator.sb_get_year(2023, sb=test_sb) == sampleoutput1
    test_sb.get_year = MagicMock(return_value=sampleoutput2)
    assert statbotics_communicator.sb_get_year(2022, sb=test_sb) == sampleoutput2


def test_sb_get_years():
    sampleoutput1 = [
        {
            "year": 2002,
            "epa_max": 24.03,
            "epa_1p": 20.8,
            "epa_5p": 17.83,
            "epa_10p": 16.64,
            "epa_25p": 14.17,
            "epa_median": 11.77,
            "epa_75p": 9.57,
            "epa_mean": 11.96,
            "epa_sd": 3.49,
            "auto_epa_max": None,
            "auto_epa_1p": None,
            "auto_epa_5p": None,
            "auto_epa_10p": None,
            "auto_epa_25p": None,
            "auto_epa_median": None,
            "auto_epa_75p": None,
            "auto_epa_mean": None,
            "auto_epa_sd": None,
            "teleop_epa_max": None,
            "teleop_epa_1p": None,
            "teleop_epa_5p": None,
            "teleop_epa_10p": None,
            "teleop_epa_25p": None,
            "teleop_epa_median": None,
            "teleop_epa_75p": None,
            "teleop_epa_mean": None,
            "teleop_epa_sd": None,
            "endgame_epa_max": None,
            "endgame_epa_1p": None,
            "endgame_epa_5p": None,
            "endgame_epa_10p": None,
            "endgame_epa_25p": None,
            "endgame_epa_median": None,
            "endgame_epa_75p": None,
            "endgame_epa_mean": None,
            "endgame_epa_sd": None,
            "rp_1_epa_max": None,
            "rp_1_epa_1p": None,
            "rp_1_epa_5p": None,
            "rp_1_epa_10p": None,
            "rp_1_epa_25p": None,
            "rp_1_epa_median": None,
            "rp_1_epa_75p": None,
            "rp_1_epa_mean": None,
            "rp_1_epa_sd": None,
            "rp_2_epa_max": None,
            "rp_2_epa_1p": None,
            "rp_2_epa_5p": None,
            "rp_2_epa_10p": None,
            "rp_2_epa_25p": None,
            "rp_2_epa_median": None,
            "rp_2_epa_75p": None,
            "rp_2_epa_mean": None,
            "rp_2_epa_sd": None,
            "epa_quals_acc": 0.5535,
            "epa_quals_mse": 0.2375,
            "quals_count": 1915,
            "epa_elims_acc": 0.6028,
            "epa_elims_mse": 0.2196,
            "elims_count": 282,
            "epa_champs_acc": 0.5526,
            "epa_champs_mse": 0.2286,
            "champs_count": 152,
            "epa_acc": 0.5599,
            "epa_mse": 0.2352,
            "count": 2197,
            "rp_1_acc": None,
            "rp_1_mse": None,
            "rp_1_champs_acc": None,
            "rp_1_champs_mse": None,
            "rp_2_acc": None,
            "rp_2_mse": None,
            "rp_2_champs_acc": None,
            "rp_2_champs_mse": None,
            "rp_champs_count": 0,
            "rp_count": 0,
            "score_mean": 28.44,
            "score_sd": 11.3,
            "auto_mean": None,
            "teleop_mean": None,
            "endgame_mean": None,
            "fouls_mean": None,
            "no_fouls_mean": None,
            "rp_1_mean": None,
            "rp_2_mean": None,
        },
        {
            "year": 2003,
            "epa_max": 57.76,
            "epa_1p": 51.87,
            "epa_5p": 43.39,
            "epa_10p": 38.2,
            "epa_25p": 28.68,
            "epa_median": 20.01,
            "epa_75p": 11.36,
            "epa_mean": 20.79,
            "epa_sd": 12.52,
            "auto_epa_max": None,
            "auto_epa_1p": None,
            "auto_epa_5p": None,
            "auto_epa_10p": None,
            "auto_epa_25p": None,
            "auto_epa_median": None,
            "auto_epa_75p": None,
            "auto_epa_mean": None,
            "auto_epa_sd": None,
            "teleop_epa_max": None,
            "teleop_epa_1p": None,
            "teleop_epa_5p": None,
            "teleop_epa_10p": None,
            "teleop_epa_25p": None,
            "teleop_epa_median": None,
            "teleop_epa_75p": None,
            "teleop_epa_mean": None,
            "teleop_epa_sd": None,
            "endgame_epa_max": None,
            "endgame_epa_1p": None,
            "endgame_epa_5p": None,
            "endgame_epa_10p": None,
            "endgame_epa_25p": None,
            "endgame_epa_median": None,
            "endgame_epa_75p": None,
            "endgame_epa_mean": None,
            "endgame_epa_sd": None,
            "rp_1_epa_max": None,
            "rp_1_epa_1p": None,
            "rp_1_epa_5p": None,
            "rp_1_epa_10p": None,
            "rp_1_epa_25p": None,
            "rp_1_epa_median": None,
            "rp_1_epa_75p": None,
            "rp_1_epa_mean": None,
            "rp_1_epa_sd": None,
            "rp_2_epa_max": None,
            "rp_2_epa_1p": None,
            "rp_2_epa_5p": None,
            "rp_2_epa_10p": None,
            "rp_2_epa_25p": None,
            "rp_2_epa_median": None,
            "rp_2_epa_75p": None,
            "rp_2_epa_mean": None,
            "rp_2_epa_sd": None,
            "epa_quals_acc": 0.6284,
            "epa_quals_mse": 0.2226,
            "quals_count": 2791,
            "epa_elims_acc": 0.6047,
            "epa_elims_mse": 0.2221,
            "elims_count": 382,
            "epa_champs_acc": 0.6154,
            "epa_champs_mse": 0.2187,
            "champs_count": 572,
            "epa_acc": 0.6256,
            "epa_mse": 0.2225,
            "count": 3173,
            "rp_1_acc": None,
            "rp_1_mse": None,
            "rp_1_champs_acc": None,
            "rp_1_champs_mse": None,
            "rp_2_acc": None,
            "rp_2_mse": None,
            "rp_2_champs_acc": None,
            "rp_2_champs_mse": None,
            "rp_champs_count": 0,
            "rp_count": 0,
            "score_mean": 48.4,
            "score_sd": 31.34,
            "auto_mean": None,
            "teleop_mean": None,
            "endgame_mean": None,
            "fouls_mean": None,
            "no_fouls_mean": None,
            "rp_1_mean": None,
            "rp_2_mean": None,
        },
    ]
    sampleoutput2 = [
        {
            "year": 2024,
            "epa_max": 22.27,
            "epa_1p": 15.95,
            "epa_5p": 13.3,
            "epa_10p": 12.09,
            "epa_25p": 10.37,
            "epa_median": 8.83,
            "epa_75p": 8.0,
            "epa_mean": 9.31,
            "epa_sd": 2.07,
            "auto_epa_max": 7.42,
            "auto_epa_1p": 5.32,
            "auto_epa_5p": 4.43,
            "auto_epa_10p": 4.03,
            "auto_epa_25p": 3.46,
            "auto_epa_median": 2.94,
            "auto_epa_75p": 2.67,
            "auto_epa_mean": 3.1,
            "auto_epa_sd": 0.69,
            "teleop_epa_max": 7.42,
            "teleop_epa_1p": 5.32,
            "teleop_epa_5p": 4.43,
            "teleop_epa_10p": 4.03,
            "teleop_epa_25p": 3.46,
            "teleop_epa_median": 2.94,
            "teleop_epa_75p": 2.67,
            "teleop_epa_mean": 3.1,
            "teleop_epa_sd": 0.69,
            "endgame_epa_max": 7.42,
            "endgame_epa_1p": 5.32,
            "endgame_epa_5p": 4.43,
            "endgame_epa_10p": 4.03,
            "endgame_epa_25p": 3.46,
            "endgame_epa_median": 2.94,
            "endgame_epa_75p": 2.67,
            "endgame_epa_mean": 3.1,
            "endgame_epa_sd": 0.69,
            "rp_1_epa_max": 0.4734,
            "rp_1_epa_1p": 0.3154,
            "rp_1_epa_5p": 0.2493,
            "rp_1_epa_10p": 0.2189,
            "rp_1_epa_25p": 0.1758,
            "rp_1_epa_median": 0.1373,
            "rp_1_epa_75p": 0.1167,
            "rp_1_epa_mean": 0.1494,
            "rp_1_epa_sd": 0.0517,
            "rp_2_epa_max": 0.4734,
            "rp_2_epa_1p": 0.3154,
            "rp_2_epa_5p": 0.2493,
            "rp_2_epa_10p": 0.2189,
            "rp_2_epa_25p": 0.1758,
            "rp_2_epa_median": 0.1373,
            "rp_2_epa_75p": 0.1167,
            "rp_2_epa_mean": 0.1494,
            "rp_2_epa_sd": 0.0517,
            "epa_quals_acc": None,
            "epa_quals_mse": None,
            "quals_count": 0,
            "epa_elims_acc": None,
            "epa_elims_mse": None,
            "elims_count": 0,
            "epa_champs_acc": None,
            "epa_champs_mse": None,
            "champs_count": 0,
            "epa_acc": None,
            "epa_mse": None,
            "count": 0,
            "rp_1_acc": None,
            "rp_1_mse": None,
            "rp_1_champs_acc": None,
            "rp_1_champs_mse": None,
            "rp_2_acc": None,
            "rp_2_mse": None,
            "rp_2_champs_acc": None,
            "rp_2_champs_mse": None,
            "rp_champs_count": 0,
            "rp_count": 0,
            "score_mean": 30.0,
            "score_sd": 10.0,
            "auto_mean": 10.0,
            "teleop_mean": 10.0,
            "endgame_mean": 10.0,
            "fouls_mean": 0.0,
            "no_fouls_mean": 30.0,
            "rp_1_mean": 0.5,
            "rp_2_mean": 0.5,
        },
        {
            "year": 2023,
            "epa_max": 86.7,
            "epa_1p": 62.34,
            "epa_5p": 52.86,
            "epa_10p": 46.85,
            "epa_25p": 35.27,
            "epa_median": 24.28,
            "epa_75p": 17.27,
            "epa_mean": 27.22,
            "epa_sd": 13.25,
            "auto_epa_max": 22.42,
            "auto_epa_1p": 17.31,
            "auto_epa_5p": 14.92,
            "auto_epa_10p": 13.56,
            "auto_epa_25p": 10.85,
            "auto_epa_median": 7.55,
            "auto_epa_75p": 4.69,
            "auto_epa_mean": 7.87,
            "auto_epa_sd": 4.11,
            "teleop_epa_max": 55.23,
            "teleop_epa_1p": 37.73,
            "teleop_epa_5p": 30.93,
            "teleop_epa_10p": 26.03,
            "teleop_epa_25p": 17.96,
            "teleop_epa_median": 10.85,
            "teleop_epa_75p": 6.74,
            "teleop_epa_mean": 13.14,
            "teleop_epa_sd": 8.78,
            "endgame_epa_max": 12.79,
            "endgame_epa_1p": 11.11,
            "endgame_epa_5p": 9.7,
            "endgame_epa_10p": 8.94,
            "endgame_epa_25p": 7.78,
            "endgame_epa_median": 6.34,
            "endgame_epa_75p": 4.69,
            "endgame_epa_mean": 6.21,
            "endgame_epa_sd": 2.26,
            "rp_1_epa_max": 1.0744,
            "rp_1_epa_1p": 0.7606,
            "rp_1_epa_5p": 0.4898,
            "rp_1_epa_10p": 0.3765,
            "rp_1_epa_25p": 0.1385,
            "rp_1_epa_median": -0.0638,
            "rp_1_epa_75p": -0.1734,
            "rp_1_epa_mean": 0.012,
            "rp_1_epa_sd": 0.2409,
            "rp_2_epa_max": 0.7927,
            "rp_2_epa_1p": 0.5982,
            "rp_2_epa_5p": 0.4827,
            "rp_2_epa_10p": 0.4247,
            "rp_2_epa_25p": 0.3139,
            "rp_2_epa_median": 0.1817,
            "rp_2_epa_75p": 0.0645,
            "rp_2_epa_mean": 0.1904,
            "rp_2_epa_sd": 0.1732,
            "epa_quals_acc": 0.7593,
            "epa_quals_mse": 0.1574,
            "quals_count": 13538,
            "epa_elims_acc": 0.7239,
            "epa_elims_mse": 0.1756,
            "elims_count": 2778,
            "epa_champs_acc": 0.7302,
            "epa_champs_mse": 0.1669,
            "champs_count": 1175,
            "epa_acc": 0.7532,
            "epa_mse": 0.1605,
            "count": 16316,
            "rp_1_acc": 0.8477,
            "rp_1_mse": 0.1115,
            "rp_1_champs_acc": 0.7478,
            "rp_1_champs_mse": 0.1727,
            "rp_2_acc": 0.6712,
            "rp_2_mse": 0.2122,
            "rp_2_champs_acc": 0.7594,
            "rp_2_champs_mse": 0.1809,
            "rp_champs_count": 2070,
            "rp_count": 27076,
            "score_mean": 74.59,
            "score_sd": 29.36,
            "auto_mean": 19.52,
            "teleop_mean": 32.69,
            "endgame_mean": 18.12,
            "fouls_mean": 4.36,
            "no_fouls_mean": 70.33,
            "rp_1_mean": 0.03,
            "rp_2_mean": 0.38,
        },
    ]
    test_sb = Mock()
    test_sb.get_years = MagicMock(return_value=sampleoutput1)
    assert statbotics_communicator.sb_get_years("year", True, 2, sb=test_sb) == sampleoutput1
    test_sb.get_years = MagicMock(return_value=sampleoutput2)
    assert statbotics_communicator.sb_get_years("year", False, 2, sb=test_sb) == sampleoutput2


def test_sb_get_team_year():
    sampleoutput1 = {
        "year": 2023,
        "team": 254,
        "offseason": False,
        "name": "The Cheesy Poofs",
        "state": "CA",
        "country": "USA",
        "district": None,
        "is_competing": False,
        "epa_start": 53.09,
        "epa_pre_champs": 80.19,
        "epa_end": 77.41,
        "epa_mean": 76.83,
        "epa_max": 81.73,
        "epa_diff": 24.32,
        "auto_epa_start": 14.73,
        "auto_epa_pre_champs": 16.49,
        "auto_epa_end": 18.77,
        "auto_epa_mean": 18.13,
        "auto_epa_max": 20.59,
        "teleop_epa_start": 24.67,
        "teleop_epa_pre_champs": 52.13,
        "teleop_epa_end": 49.49,
        "teleop_epa_mean": 48.48,
        "teleop_epa_max": 54.37,
        "endgame_epa_start": 13.68,
        "endgame_epa_pre_champs": 11.56,
        "endgame_epa_end": 9.15,
        "endgame_epa_mean": 10.21,
        "endgame_epa_max": 11.65,
        "rp_1_epa_start": 0.1294,
        "rp_1_epa_pre_champs": 0.9545,
        "rp_1_epa_end": 0.9967,
        "rp_1_epa_mean": 0.886,
        "rp_1_epa_max": 0.9967,
        "rp_2_epa_start": 0.3783,
        "rp_2_epa_pre_champs": 0.6071,
        "rp_2_epa_end": 0.4425,
        "rp_2_epa_mean": 0.4976,
        "rp_2_epa_max": 0.6364,
        "unitless_epa_end": 1960.0,
        "norm_epa_end": 1964.0,
        "wins": 36,
        "losses": 5,
        "ties": 0,
        "count": 41,
        "winrate": 0.878,
        "full_wins": 52,
        "full_losses": 8,
        "full_ties": 0,
        "full_count": 60,
        "full_winrate": 0.8667,
        "total_epa_rank": 3,
        "total_epa_percentile": 0.9991,
        "total_team_count": 3400,
        "country_epa_rank": 2,
        "country_epa_percentile": 0.9993,
        "country_team_count": 2689,
        "state_epa_rank": 2,
        "state_epa_percentile": 0.9926,
        "state_team_count": 270,
        "district_epa_rank": None,
        "district_epa_percentile": None,
        "district_team_count": None,
    }
    sampleoutput2 = {
        "year": 2023,
        "team": 1678,
        "offseason": False,
        "name": "Citrus Circuits",
        "state": "CA",
        "country": "USA",
        "district": None,
        "is_competing": True,
        "epa_start": 53.62,
        "epa_pre_champs": 73.27,
        "epa_end": 68.02,
        "epa_mean": 68.6,
        "epa_max": 74.05,
        "epa_diff": 14.4,
        "auto_epa_start": 14.88,
        "auto_epa_pre_champs": 19.0,
        "auto_epa_end": 19.13,
        "auto_epa_mean": 17.32,
        "auto_epa_max": 19.54,
        "teleop_epa_start": 24.92,
        "teleop_epa_pre_champs": 43.75,
        "teleop_epa_end": 36.56,
        "teleop_epa_mean": 40.3,
        "teleop_epa_max": 46.33,
        "endgame_epa_start": 13.81,
        "endgame_epa_pre_champs": 10.52,
        "endgame_epa_end": 12.33,
        "endgame_epa_mean": 10.98,
        "endgame_epa_max": 12.46,
        "rp_1_epa_start": 0.1339,
        "rp_1_epa_pre_champs": 0.9609,
        "rp_1_epa_end": 0.9774,
        "rp_1_epa_mean": 0.8456,
        "rp_1_epa_max": 0.9774,
        "rp_2_epa_start": 0.3828,
        "rp_2_epa_pre_champs": 0.6767,
        "rp_2_epa_end": 0.7134,
        "rp_2_epa_mean": 0.6727,
        "rp_2_epa_max": 0.7314,
        "unitless_epa_end": 1880.0,
        "norm_epa_end": 1860.0,
        "wins": 62,
        "losses": 7,
        "ties": 1,
        "count": 70,
        "winrate": 0.8929,
        "full_wins": 91,
        "full_losses": 10,
        "full_ties": 1,
        "full_count": 102,
        "full_winrate": 0.8971,
        "total_epa_rank": 9,
        "total_epa_percentile": 0.9974,
        "total_team_count": 3400,
        "country_epa_rank": 8,
        "country_epa_percentile": 0.997,
        "country_team_count": 2689,
        "state_epa_rank": 5,
        "state_epa_percentile": 0.9815,
        "state_team_count": 270,
        "district_epa_rank": None,
        "district_epa_percentile": None,
        "district_team_count": None,
    }
    test_sb = Mock()
    test_sb.get_team_year = MagicMock(return_value=sampleoutput1)
    assert statbotics_communicator.sb_get_team_year(254, 2023, sb=test_sb) == sampleoutput1
    test_sb.get_team_year = MagicMock(return_value=sampleoutput2)
    assert statbotics_communicator.sb_get_team_year(1678, 2023, sb=test_sb) == sampleoutput2


def test_sb_get_team_years():
    sampleoutput1 = [
        {
            "year": 2002,
            "team": 254,
            "offseason": False,
            "name": "The Cheesy Poofs",
            "state": "CA",
            "country": "USA",
            "district": None,
            "is_competing": None,
            "epa_start": 11.96,
            "epa_pre_champs": 18.3,
            "epa_end": 18.3,
            "epa_mean": 14.89,
            "epa_max": 18.3,
            "epa_diff": 6.34,
            "auto_epa_start": None,
            "auto_epa_pre_champs": None,
            "auto_epa_end": None,
            "auto_epa_mean": None,
            "auto_epa_max": None,
            "teleop_epa_start": None,
            "teleop_epa_pre_champs": None,
            "teleop_epa_end": None,
            "teleop_epa_mean": None,
            "teleop_epa_max": None,
            "endgame_epa_start": None,
            "endgame_epa_pre_champs": None,
            "endgame_epa_end": None,
            "endgame_epa_mean": None,
            "endgame_epa_max": None,
            "rp_1_epa_start": None,
            "rp_1_epa_pre_champs": None,
            "rp_1_epa_end": None,
            "rp_1_epa_mean": None,
            "rp_1_epa_max": None,
            "rp_2_epa_start": None,
            "rp_2_epa_pre_champs": None,
            "rp_2_epa_end": None,
            "rp_2_epa_mean": None,
            "rp_2_epa_max": None,
            "unitless_epa_end": None,
            "norm_epa_end": 1701.92,
            "wins": 20,
            "losses": 8,
            "ties": 1,
            "count": 29,
            "winrate": 0.7069,
            "full_wins": 20,
            "full_losses": 8,
            "full_ties": 1,
            "full_count": 29,
            "full_winrate": 0.7069,
            "total_epa_rank": 23,
            "total_epa_percentile": 0.9641,
            "total_team_count": 641,
            "country_epa_rank": 22,
            "country_epa_percentile": 0.9641,
            "country_team_count": 613,
            "state_epa_rank": 1,
            "state_epa_percentile": 0.9868,
            "state_team_count": 76,
            "district_epa_rank": None,
            "district_epa_percentile": None,
            "district_team_count": None,
        },
        {
            "year": 2003,
            "team": 254,
            "offseason": False,
            "name": "The Cheesy Poofs",
            "state": "CA",
            "country": "USA",
            "district": None,
            "is_competing": None,
            "epa_start": 31.2,
            "epa_pre_champs": 39.53,
            "epa_end": 41.02,
            "epa_mean": 41.12,
            "epa_max": 50.41,
            "epa_diff": 9.82,
            "auto_epa_start": None,
            "auto_epa_pre_champs": None,
            "auto_epa_end": None,
            "auto_epa_mean": None,
            "auto_epa_max": None,
            "teleop_epa_start": None,
            "teleop_epa_pre_champs": None,
            "teleop_epa_end": None,
            "teleop_epa_mean": None,
            "teleop_epa_max": None,
            "endgame_epa_start": None,
            "endgame_epa_pre_champs": None,
            "endgame_epa_end": None,
            "endgame_epa_mean": None,
            "endgame_epa_max": None,
            "rp_1_epa_start": None,
            "rp_1_epa_pre_champs": None,
            "rp_1_epa_end": None,
            "rp_1_epa_mean": None,
            "rp_1_epa_max": None,
            "rp_2_epa_start": None,
            "rp_2_epa_pre_champs": None,
            "rp_2_epa_end": None,
            "rp_2_epa_mean": None,
            "rp_2_epa_max": None,
            "unitless_epa_end": None,
            "norm_epa_end": 1661.72,
            "wins": 29,
            "losses": 17,
            "ties": 0,
            "count": 46,
            "winrate": 0.6304,
            "full_wins": 29,
            "full_losses": 17,
            "full_ties": 0,
            "full_count": 46,
            "full_winrate": 0.6304,
            "total_epa_rank": 54,
            "total_epa_percentile": 0.9312,
            "total_team_count": 785,
            "country_epa_rank": 53,
            "country_epa_percentile": 0.9285,
            "country_team_count": 741,
            "state_epa_rank": 8,
            "state_epa_percentile": 0.913,
            "state_team_count": 92,
            "district_epa_rank": None,
            "district_epa_percentile": None,
            "district_team_count": None,
        },
    ]
    sampleoutput2 = [
        {
            "year": 2006,
            "team": 1678,
            "offseason": False,
            "name": "Citrus Circuits",
            "state": "CA",
            "country": "USA",
            "district": None,
            "is_competing": None,
            "epa_start": 6.2,
            "epa_pre_champs": 6.0,
            "epa_end": 6.0,
            "epa_mean": 7.28,
            "epa_max": 7.76,
            "epa_diff": -0.2,
            "auto_epa_start": None,
            "auto_epa_pre_champs": None,
            "auto_epa_end": None,
            "auto_epa_mean": None,
            "auto_epa_max": None,
            "teleop_epa_start": None,
            "teleop_epa_pre_champs": None,
            "teleop_epa_end": None,
            "teleop_epa_mean": None,
            "teleop_epa_max": None,
            "endgame_epa_start": None,
            "endgame_epa_pre_champs": None,
            "endgame_epa_end": None,
            "endgame_epa_mean": None,
            "endgame_epa_max": None,
            "rp_1_epa_start": None,
            "rp_1_epa_pre_champs": None,
            "rp_1_epa_end": None,
            "rp_1_epa_mean": None,
            "rp_1_epa_max": None,
            "rp_2_epa_start": None,
            "rp_2_epa_pre_champs": None,
            "rp_2_epa_end": None,
            "rp_2_epa_mean": None,
            "rp_2_epa_max": None,
            "unitless_epa_end": None,
            "norm_epa_end": 1457.43,
            "wins": 7,
            "losses": 5,
            "ties": 0,
            "count": 12,
            "winrate": 0.5833,
            "full_wins": 7,
            "full_losses": 5,
            "full_ties": 0,
            "full_count": 12,
            "full_winrate": 0.5833,
            "total_epa_rank": 762,
            "total_epa_percentile": 0.3227,
            "total_team_count": 1125,
            "country_epa_rank": 708,
            "country_epa_percentile": 0.3086,
            "country_team_count": 1024,
            "state_epa_rank": 73,
            "state_epa_percentile": 0.3364,
            "state_team_count": 110,
            "district_epa_rank": None,
            "district_epa_percentile": None,
            "district_team_count": None,
        },
        {
            "year": 2007,
            "team": 1678,
            "offseason": False,
            "name": "Citrus Circuits",
            "state": "CA",
            "country": "USA",
            "district": None,
            "is_competing": None,
            "epa_start": 1.79,
            "epa_pre_champs": 3.48,
            "epa_end": 3.48,
            "epa_mean": 5.78,
            "epa_max": 5.83,
            "epa_diff": 1.69,
            "auto_epa_start": None,
            "auto_epa_pre_champs": None,
            "auto_epa_end": None,
            "auto_epa_mean": None,
            "auto_epa_max": None,
            "teleop_epa_start": None,
            "teleop_epa_pre_champs": None,
            "teleop_epa_end": None,
            "teleop_epa_mean": None,
            "teleop_epa_max": None,
            "endgame_epa_start": None,
            "endgame_epa_pre_champs": None,
            "endgame_epa_end": None,
            "endgame_epa_mean": None,
            "endgame_epa_max": None,
            "rp_1_epa_start": None,
            "rp_1_epa_pre_champs": None,
            "rp_1_epa_end": None,
            "rp_1_epa_mean": None,
            "rp_1_epa_max": None,
            "rp_2_epa_start": None,
            "rp_2_epa_pre_champs": None,
            "rp_2_epa_end": None,
            "rp_2_epa_mean": None,
            "rp_2_epa_max": None,
            "unitless_epa_end": None,
            "norm_epa_end": 1459.96,
            "wins": 5,
            "losses": 5,
            "ties": 2,
            "count": 12,
            "winrate": 0.5,
            "full_wins": 5,
            "full_losses": 5,
            "full_ties": 2,
            "full_count": 12,
            "full_winrate": 0.5,
            "total_epa_rank": 753,
            "total_epa_percentile": 0.4071,
            "total_team_count": 1270,
            "country_epa_rank": 678,
            "country_epa_percentile": 0.4099,
            "country_team_count": 1149,
            "state_epa_rank": 72,
            "state_epa_percentile": 0.4194,
            "state_team_count": 124,
            "district_epa_rank": None,
            "district_epa_percentile": None,
            "district_team_count": None,
        },
    ]
    test_sb = Mock()
    test_sb.get_team_years = MagicMock(return_value=sampleoutput1)
    assert statbotics_communicator.sb_get_team_years(254, limit=2, sb=test_sb) == sampleoutput1
    test_sb.get_team_years = MagicMock(return_value=sampleoutput2)
    assert statbotics_communicator.sb_get_team_years(1678, limit=2, sb=test_sb) == sampleoutput2


def test_sb_get_event():
    sampleoutput1 = {
        "key": "2019cur",
        "year": 2019,
        "name": "Curie Division",
        "time": 1556078400,
        "state": "MI",
        "country": "USA",
        "district": None,
        "start_date": "2019-04-24",
        "end_date": "2019-04-27",
        "type": 3,
        "week": 8,
        "offseason": False,
        "video": "https://www.twitch.tv/firstinspires_curie",
        "status": "Completed",
        "qual_matches": 114,
        "epa_max": 44.93,
        "epa_top8": 35.02,
        "epa_top24": 28.18,
        "epa_mean": 25.92,
        "epa_sd": 7.06,
        "epa_acc": 0.8062,
        "epa_mse": 0.1367,
        "rp_1_acc": 0.7325,
        "rp_1_mse": 0.1892,
        "rp_2_acc": 0.8202,
        "rp_2_mse": 0.1265,
    }
    sampleoutput2 = {
        "key": "2023mttd",
        "year": 2023,
        "name": "Madtown Throwdown",
        "time": 1699592400,
        "state": "CA",
        "country": "USA",
        "district": None,
        "start_date": "2023-11-10",
        "end_date": "2023-11-12",
        "type": 99,
        "week": 9,
        "offseason": True,
        "video": "https://www.twitch.tv/frc1671",
        "status": "Ongoing",
        "qual_matches": 75,
        "epa_max": 86.7,
        "epa_top8": 58.0,
        "epa_top24": 27.02,
        "epa_mean": 33.84,
        "epa_sd": 19.72,
        "epa_acc": 0.7303,
        "epa_mse": 0.1893,
        "rp_1_acc": None,
        "rp_1_mse": None,
        "rp_2_acc": None,
        "rp_2_mse": None,
    }
    test_sb = Mock()
    test_sb.get_event = MagicMock(return_value=sampleoutput1)
    assert statbotics_communicator.sb_get_event("2019cur", sb=test_sb) == sampleoutput1
    test_sb.get_event = MagicMock(return_value=sampleoutput2)
    assert statbotics_communicator.sb_get_event("2023mttd", sb=test_sb) == sampleoutput2


def test_sb_get_events():
    sampleoutput1 = [
        {
            "key": "2023alhu",
            "year": 2023,
            "name": "Rocket City Regional",
            "time": 1680667200,
            "state": "AL",
            "country": "USA",
            "district": None,
            "start_date": "2023-04-05",
            "end_date": "2023-04-08",
            "type": 0,
            "week": 6,
            "offseason": False,
            "video": "https://www.twitch.tv/firstinspires13",
            "status": "Completed",
            "qual_matches": 84,
            "epa_max": 62.75,
            "epa_top8": 43.55,
            "epa_top24": 29.0,
            "epa_mean": 31.24,
            "epa_sd": 13.21,
            "epa_acc": 0.7576,
            "epa_mse": 0.1672,
            "rp_1_acc": 0.7143,
            "rp_1_mse": 0.2111,
            "rp_2_acc": 0.5893,
            "rp_2_mse": 0.2582,
        },
        {
            "key": "2023arc",
            "year": 2023,
            "name": "Archimedes Division",
            "time": 1681876800,
            "state": "TX",
            "country": "USA",
            "district": None,
            "start_date": "2023-04-19",
            "end_date": "2023-04-22",
            "type": 3,
            "week": 8,
            "offseason": False,
            "video": "https://www.twitch.tv/firstinspires_archimedes",
            "status": "Completed",
            "qual_matches": 129,
            "epa_max": 83.98,
            "epa_top8": 62.59,
            "epa_top24": 51.55,
            "epa_mean": 44.18,
            "epa_sd": 15.05,
            "epa_acc": 0.7103,
            "epa_mse": 0.165,
            "rp_1_acc": 0.7946,
            "rp_1_mse": 0.1376,
            "rp_2_acc": 0.7791,
            "rp_2_mse": 0.1565,
        },
    ]
    sampleoutput2 = [
        {
            "key": "2023alhu",
            "year": 2023,
            "name": "Rocket City Regional",
            "time": 1680667200,
            "state": "AL",
            "country": "USA",
            "district": None,
            "start_date": "2023-04-05",
            "end_date": "2023-04-08",
            "type": 0,
            "week": 6,
            "offseason": False,
            "video": "https://www.twitch.tv/firstinspires13",
            "status": "Completed",
            "qual_matches": 84,
            "epa_max": 62.75,
            "epa_top8": 43.55,
            "epa_top24": 29.0,
            "epa_mean": 31.24,
            "epa_sd": 13.21,
            "epa_acc": 0.7576,
            "epa_mse": 0.1672,
            "rp_1_acc": 0.7143,
            "rp_1_mse": 0.2111,
            "rp_2_acc": 0.5893,
            "rp_2_mse": 0.2582,
        },
        {
            "key": "2023arc",
            "year": 2023,
            "name": "Archimedes Division",
            "time": 1681876800,
            "state": "TX",
            "country": "USA",
            "district": None,
            "start_date": "2023-04-19",
            "end_date": "2023-04-22",
            "type": 3,
            "week": 8,
            "offseason": False,
            "video": "https://www.twitch.tv/firstinspires_archimedes",
            "status": "Completed",
            "qual_matches": 129,
            "epa_max": 83.98,
            "epa_top8": 62.59,
            "epa_top24": 51.55,
            "epa_mean": 44.18,
            "epa_sd": 15.05,
            "epa_acc": 0.7103,
            "epa_mse": 0.165,
            "rp_1_acc": 0.7946,
            "rp_1_mse": 0.1376,
            "rp_2_acc": 0.7791,
            "rp_2_mse": 0.1565,
        },
    ]
    test_sb = Mock()
    test_sb.get_events = MagicMock(return_value=sampleoutput1)
    assert (
        statbotics_communicator.sb_get_events(2023, "United States", limit=2, sb=test_sb)
        == sampleoutput1
    )
    test_sb.get_events = MagicMock(return_value=sampleoutput2)
    assert (
        statbotics_communicator.sb_get_events(2020, "United States", limit=2, sb=test_sb)
        == sampleoutput2
    )


def test_sb_get_team_event():
    sampleoutput1 = {
        "team": 254,
        "year": 2023,
        "event": "2023cc",
        "offseason": True,
        "team_name": "The Cheesy Poofs",
        "event_name": "Chezy Champs",
        "state": "CA",
        "country": "USA",
        "district": None,
        "type": 99,
        "week": 9,
        "status": "Completed",
        "first_event": False,
        "epa_start": 77.41,
        "epa_pre_playoffs": 77.41,
        "epa_end": 77.41,
        "epa_mean": 77.41,
        "epa_max": 77.41,
        "epa_diff": 0.0,
        "auto_epa_start": 18.77,
        "auto_epa_pre_playoffs": 18.77,
        "auto_epa_end": 18.77,
        "auto_epa_mean": 18.77,
        "auto_epa_max": 18.77,
        "teleop_epa_start": 49.49,
        "teleop_epa_pre_playoffs": 49.49,
        "teleop_epa_end": 49.49,
        "teleop_epa_mean": 49.49,
        "teleop_epa_max": 49.49,
        "endgame_epa_start": 9.15,
        "endgame_epa_pre_playoffs": 9.15,
        "endgame_epa_end": 9.15,
        "endgame_epa_mean": 9.15,
        "endgame_epa_max": 9.15,
        "rp_1_epa_start": 0.9967,
        "rp_1_epa_end": 0.9967,
        "rp_1_epa_mean": 0.9967,
        "rp_1_epa_max": 0.9967,
        "rp_2_epa_start": 0.4425,
        "rp_2_epa_end": 0.4425,
        "rp_2_epa_mean": 0.4425,
        "rp_2_epa_max": 0.4425,
        "wins": 12,
        "losses": 3,
        "ties": 0,
        "count": 15,
        "winrate": 0.8,
        "qual_wins": 7,
        "qual_losses": 3,
        "qual_ties": 0,
        "qual_count": 10,
        "qual_winrate": 0.7,
        "rps": 33,
        "rps_per_match": 3.3,
        "rank": 3,
        "num_teams": 41,
    }
    sampleoutput2 = {
        "team": 1678,
        "year": 2023,
        "event": "2023mttd",
        "offseason": True,
        "team_name": "Citrus Circuits",
        "event_name": "Madtown Throwdown",
        "state": "CA",
        "country": "USA",
        "district": None,
        "type": 99,
        "week": 9,
        "status": "Ongoing",
        "first_event": False,
        "epa_start": 68.02,
        "epa_pre_playoffs": 68.02,
        "epa_end": 68.02,
        "epa_mean": 68.02,
        "epa_max": 68.02,
        "epa_diff": 0.0,
        "auto_epa_start": 19.13,
        "auto_epa_pre_playoffs": 19.13,
        "auto_epa_end": 19.13,
        "auto_epa_mean": 19.13,
        "auto_epa_max": 19.13,
        "teleop_epa_start": 36.56,
        "teleop_epa_pre_playoffs": 36.56,
        "teleop_epa_end": 36.56,
        "teleop_epa_mean": 36.56,
        "teleop_epa_max": 36.56,
        "endgame_epa_start": 12.33,
        "endgame_epa_pre_playoffs": 12.33,
        "endgame_epa_end": 12.33,
        "endgame_epa_mean": 12.33,
        "endgame_epa_max": 12.33,
        "rp_1_epa_start": 0.9774,
        "rp_1_epa_end": 0.9774,
        "rp_1_epa_mean": 0.9774,
        "rp_1_epa_max": 0.9774,
        "rp_2_epa_start": 0.7134,
        "rp_2_epa_end": 0.7134,
        "rp_2_epa_mean": 0.7134,
        "rp_2_epa_max": 0.7134,
        "wins": 12,
        "losses": 1,
        "ties": 0,
        "count": 13,
        "winrate": 0.9231,
        "qual_wins": 8,
        "qual_losses": 1,
        "qual_ties": 0,
        "qual_count": 9,
        "qual_winrate": 0.8889,
        "rps": 28,
        "rps_per_match": 3.111111111111111,
        "rank": 3,
        "num_teams": 50,
    }
    test_sb = Mock()
    test_sb.get_team_event = MagicMock(return_value=sampleoutput1)
    assert statbotics_communicator.sb_get_team_event(254, "2023cc", sb=test_sb) == sampleoutput1
    test_sb.get_team_event = MagicMock(return_value=sampleoutput2)
    assert statbotics_communicator.sb_get_team_event(1678, "2023mttd", sb=test_sb) == sampleoutput2


def test_sb_get_team_events():
    sampleoutput1 = [
        {
            "team": 254,
            "year": 2023,
            "event": "2023arc",
            "offseason": False,
            "team_name": "The Cheesy Poofs",
            "event_name": "Archimedes Division",
            "state": "TX",
            "country": "USA",
            "district": None,
            "type": 3,
            "week": 8,
            "status": "Completed",
            "first_event": False,
            "epa_start": 80.19,
            "epa_pre_playoffs": 80.14,
            "epa_end": 77.41,
            "epa_mean": 78.72,
            "epa_max": 80.19,
            "epa_diff": -2.78,
            "auto_epa_start": 16.49,
            "auto_epa_pre_playoffs": 19.27,
            "auto_epa_end": 18.77,
            "auto_epa_mean": 17.81,
            "auto_epa_max": 19.49,
            "teleop_epa_start": 52.13,
            "teleop_epa_pre_playoffs": 51.7,
            "teleop_epa_end": 49.49,
            "teleop_epa_mean": 51.56,
            "teleop_epa_max": 52.84,
            "endgame_epa_start": 11.56,
            "endgame_epa_pre_playoffs": 9.17,
            "endgame_epa_end": 9.15,
            "endgame_epa_mean": 9.35,
            "endgame_epa_max": 11.65,
            "rp_1_epa_start": 0.9545,
            "rp_1_epa_end": 0.9967,
            "rp_1_epa_mean": 0.9854,
            "rp_1_epa_max": 0.9967,
            "rp_2_epa_start": 0.6071,
            "rp_2_epa_end": 0.4425,
            "rp_2_epa_mean": 0.4799,
            "rp_2_epa_max": 0.6364,
            "wins": 9,
            "losses": 3,
            "ties": 0,
            "count": 12,
            "winrate": 0.75,
            "qual_wins": 9,
            "qual_losses": 1,
            "qual_ties": 0,
            "qual_count": 10,
            "qual_winrate": 0.9,
            "rps": 35,
            "rps_per_match": 3.5,
            "rank": 4,
            "num_teams": 77,
        }
    ]
    sampleoutput2 = [
        {
            "team": 1678,
            "year": 2023,
            "event": "2023cada",
            "offseason": False,
            "team_name": "Citrus Circuits",
            "event_name": "Sacramento Regional",
            "state": "CA",
            "country": "USA",
            "district": None,
            "type": 0,
            "week": 4,
            "status": "Completed",
            "first_event": False,
            "epa_start": 66.39,
            "epa_pre_playoffs": 70.02,
            "epa_end": 70.24,
            "epa_mean": 69.89,
            "epa_max": 72.29,
            "epa_diff": 3.85,
            "auto_epa_start": 12.3,
            "auto_epa_pre_playoffs": 18.01,
            "auto_epa_end": 16.87,
            "auto_epa_mean": 16.2,
            "auto_epa_max": 18.27,
            "teleop_epa_start": 45.25,
            "teleop_epa_pre_playoffs": 43.43,
            "teleop_epa_end": 44.33,
            "teleop_epa_mean": 44.07,
            "teleop_epa_max": 45.45,
            "endgame_epa_start": 8.84,
            "endgame_epa_pre_playoffs": 8.58,
            "endgame_epa_end": 9.04,
            "endgame_epa_mean": 9.62,
            "endgame_epa_max": 10.83,
            "rp_1_epa_start": 0.6224,
            "rp_1_epa_end": 0.8666,
            "rp_1_epa_mean": 0.7417,
            "rp_1_epa_max": 0.8666,
            "rp_2_epa_start": 0.633,
            "rp_2_epa_end": 0.6651,
            "rp_2_epa_mean": 0.6811,
            "rp_2_epa_max": 0.7314,
            "wins": 15,
            "losses": 0,
            "ties": 0,
            "count": 15,
            "winrate": 1.0,
            "qual_wins": 10,
            "qual_losses": 0,
            "qual_ties": 0,
            "qual_count": 10,
            "qual_winrate": 1.0,
            "rps": 37,
            "rps_per_match": 3.7,
            "rank": 2,
            "num_teams": 46,
        }
    ]
    test_sb = Mock()
    test_sb.get_team_events = MagicMock(return_value=sampleoutput1)
    assert statbotics_communicator.sb_get_team_events(254, 2023, sb=test_sb) == sampleoutput1
    test_sb.get_team_events = MagicMock(return_value=sampleoutput2)
    assert statbotics_communicator.sb_get_team_events(1678, 2023, sb=test_sb) == sampleoutput2


def test_sb_get_match():
    sampleoutput1 = {
        "key": "2019cur_qm1",
        "year": 2019,
        "event": "2019cur",
        "comp_level": "qm",
        "set_number": 1,
        "match_number": 1,
        "offseason": False,
        "status": "Completed",
        "video": "u5SEH6WghII",
        "red_1": 7598,
        "red_2": 126,
        "red_3": 4028,
        "red_dq": "",
        "red_surrogate": "",
        "red_epa_sum": 70.77,
        "red_auto_epa_sum": 14.66,
        "red_teleop_epa_sum": 39.53,
        "red_endgame_epa_sum": 16.58,
        "red_rp_1_epa_sum": 0.0916,
        "red_rp_2_epa_sum": 0.6546,
        "blue_1": 56,
        "blue_2": 5672,
        "blue_3": 3339,
        "blue_dq": "",
        "blue_surrogate": "",
        "blue_epa_sum": 62.33,
        "blue_auto_epa_sum": 10.91,
        "blue_teleop_epa_sum": 32.05,
        "blue_endgame_epa_sum": 19.37,
        "blue_rp_1_epa_sum": -0.2694,
        "blue_rp_2_epa_sum": 1.2458,
        "winner": "red",
        "epa_winner": "red",
        "epa_win_prob": 0.6702,
        "red_rp_1_prob": 0.1633,
        "red_rp_2_prob": 0.6498,
        "blue_rp_1_prob": 0.044,
        "blue_rp_2_prob": 0.9518,
        "playoff": False,
        "time": 1556078401,
        "predicted_time": None,
        "red_score": 112,
        "blue_score": 81,
        "red_auto": 15,
        "red_auto_movement": 15,
        "red_teleop": 58,
        "red_endgame": 24,
        "red_no_fouls": 97,
        "red_fouls": 15,
        "red_rp_1": 0,
        "red_rp_2": 1,
        "red_tiebreaker": None,
        "blue_auto": 12,
        "blue_auto_movement": 12,
        "blue_teleop": 48,
        "blue_endgame": 21,
        "blue_no_fouls": 81,
        "blue_fouls": 0,
        "blue_rp_1": 0,
        "blue_rp_2": 1,
        "blue_tiebreaker": None,
    }
    sampleoutput2 = {
        "key": "2019cur_qm2",
        "year": 2019,
        "event": "2019cur",
        "comp_level": "qm",
        "set_number": 1,
        "match_number": 2,
        "offseason": False,
        "status": "Completed",
        "video": "xhiOkP3WrIU",
        "red_1": 3538,
        "red_2": 1114,
        "red_3": 2834,
        "red_dq": "",
        "red_surrogate": "",
        "red_epa_sum": 109.72,
        "red_auto_epa_sum": 15.48,
        "red_teleop_epa_sum": 72.04,
        "red_endgame_epa_sum": 22.19,
        "red_rp_1_epa_sum": 1.265,
        "red_rp_2_epa_sum": 1.7343,
        "blue_1": 7515,
        "blue_2": 7590,
        "blue_3": 302,
        "blue_dq": "",
        "blue_surrogate": "",
        "blue_epa_sum": 51.8,
        "blue_auto_epa_sum": 12.14,
        "blue_teleop_epa_sum": 22.84,
        "blue_endgame_epa_sum": 16.82,
        "blue_rp_1_epa_sum": -0.1113,
        "blue_rp_2_epa_sum": 0.8811,
        "winner": "red",
        "epa_winner": "red",
        "epa_win_prob": 0.9924,
        "red_rp_1_prob": 0.9552,
        "red_rp_2_prob": 0.9929,
        "blue_rp_1_prob": 0.0798,
        "blue_rp_2_prob": 0.8212,
        "playoff": False,
        "time": 1556078402,
        "predicted_time": None,
        "red_score": 127,
        "blue_score": 35,
        "red_auto": 15,
        "red_auto_movement": 15,
        "red_teleop": 88,
        "red_endgame": 18,
        "red_no_fouls": 121,
        "red_fouls": 6,
        "red_rp_1": 1,
        "red_rp_2": 1,
        "red_tiebreaker": None,
        "blue_auto": 12,
        "blue_auto_movement": 12,
        "blue_teleop": 5,
        "blue_endgame": 18,
        "blue_no_fouls": 35,
        "blue_fouls": 0,
        "blue_rp_1": 0,
        "blue_rp_2": 1,
        "blue_tiebreaker": None,
    }
    test_sb = Mock()
    test_sb.get_match = MagicMock(return_value=sampleoutput1)
    assert statbotics_communicator.sb_get_match("2019cur_qm1", sb=test_sb) == sampleoutput1
    test_sb.get_match = MagicMock(return_value=sampleoutput2)
    assert statbotics_communicator.sb_get_match("2019cur_qm2", sb=test_sb) == sampleoutput2


def test_sb_get_matches():
    sampleoutput1 = [
        {
            "key": "2002oh_qm4",
            "year": 2002,
            "event": "2002oh",
            "comp_level": "qm",
            "set_number": 1,
            "match_number": 4,
            "offseason": False,
            "status": "Completed",
            "video": None,
            "red_1": 254,
            "red_2": 240,
            "red_3": None,
            "red_dq": "",
            "red_surrogate": "",
            "red_epa_sum": 23.92,
            "red_auto_epa_sum": None,
            "red_teleop_epa_sum": None,
            "red_endgame_epa_sum": None,
            "red_rp_1_epa_sum": None,
            "red_rp_2_epa_sum": None,
            "blue_1": 120,
            "blue_2": 808,
            "blue_3": None,
            "blue_dq": "",
            "blue_surrogate": "",
            "blue_epa_sum": 23.92,
            "blue_auto_epa_sum": None,
            "blue_teleop_epa_sum": None,
            "blue_endgame_epa_sum": None,
            "blue_rp_1_epa_sum": None,
            "blue_rp_2_epa_sum": None,
            "winner": "red",
            "epa_winner": "red",
            "epa_win_prob": 0.5,
            "red_rp_1_prob": None,
            "red_rp_2_prob": None,
            "blue_rp_1_prob": None,
            "blue_rp_2_prob": None,
            "playoff": False,
            "time": 1016078404,
            "predicted_time": None,
            "red_score": 41,
            "blue_score": 27,
            "red_auto": None,
            "red_auto_movement": None,
            "red_teleop": None,
            "red_endgame": None,
            "red_no_fouls": None,
            "red_fouls": None,
            "red_rp_1": None,
            "red_rp_2": None,
            "red_tiebreaker": None,
            "blue_auto": None,
            "blue_auto_movement": None,
            "blue_teleop": None,
            "blue_endgame": None,
            "blue_no_fouls": None,
            "blue_fouls": None,
            "blue_rp_1": None,
            "blue_rp_2": None,
            "blue_tiebreaker": None,
        }
    ]
    sampleoutput2 = [
        {
            "key": "2006sac_qm5",
            "year": 2006,
            "event": "2006sac",
            "comp_level": "qm",
            "set_number": 1,
            "match_number": 5,
            "offseason": False,
            "status": "Completed",
            "video": None,
            "red_1": 115,
            "red_2": 701,
            "red_3": 1966,
            "red_dq": "",
            "red_surrogate": "",
            "red_epa_sum": 15.0,
            "red_auto_epa_sum": None,
            "red_teleop_epa_sum": None,
            "red_endgame_epa_sum": None,
            "red_rp_1_epa_sum": None,
            "red_rp_2_epa_sum": None,
            "blue_1": 1678,
            "blue_2": 1974,
            "blue_3": 1960,
            "blue_dq": "",
            "blue_surrogate": "",
            "blue_epa_sum": 18.59,
            "blue_auto_epa_sum": None,
            "blue_teleop_epa_sum": None,
            "blue_endgame_epa_sum": None,
            "blue_rp_1_epa_sum": None,
            "blue_rp_2_epa_sum": None,
            "winner": "red",
            "epa_winner": "blue",
            "epa_win_prob": 0.4577,
            "red_rp_1_prob": None,
            "red_rp_2_prob": None,
            "blue_rp_1_prob": None,
            "blue_rp_2_prob": None,
            "playoff": False,
            "time": 1143086405,
            "predicted_time": None,
            "red_score": 42,
            "blue_score": 0,
            "red_auto": None,
            "red_auto_movement": None,
            "red_teleop": None,
            "red_endgame": None,
            "red_no_fouls": None,
            "red_fouls": None,
            "red_rp_1": None,
            "red_rp_2": None,
            "red_tiebreaker": None,
            "blue_auto": None,
            "blue_auto_movement": None,
            "blue_teleop": None,
            "blue_endgame": None,
            "blue_no_fouls": None,
            "blue_fouls": None,
            "blue_rp_1": None,
            "blue_rp_2": None,
            "blue_tiebreaker": None,
        }
    ]
    test_sb = Mock()
    test_sb.get_matches = MagicMock(return_value=sampleoutput1)
    assert statbotics_communicator.sb_get_matches(254, limit=1, sb=test_sb) == sampleoutput1
    test_sb.get_matches = MagicMock(return_value=sampleoutput2)
    assert statbotics_communicator.sb_get_matches(1678, limit=1, sb=test_sb) == sampleoutput2


def test_sb_get_team_match():
    sampleoutput1 = {
        "team": 254,
        "year": 2023,
        "event": "2023cc",
        "match": "2023cc_qm7",
        "time": 1696095360,
        "offseason": True,
        "playoff": False,
        "alliance": "blue",
        "status": "Completed",
        "dq": False,
        "surrogate": False,
        "epa": 77.41,
        "auto_epa": 18.77,
        "teleop_epa": 49.49,
        "endgame_epa": 9.15,
        "rp_1_epa": 0.9967,
        "rp_2_epa": 0.4425,
        "post_epa": 77.41,
    }
    sampleoutput2 = {
        "team": 1678,
        "year": 2023,
        "event": "2023cc",
        "match": "2023cc_qm11",
        "time": 1696097310,
        "offseason": True,
        "playoff": False,
        "alliance": "blue",
        "status": "Completed",
        "dq": False,
        "surrogate": False,
        "epa": 68.02,
        "auto_epa": 19.13,
        "teleop_epa": 36.56,
        "endgame_epa": 12.33,
        "rp_1_epa": 0.9774,
        "rp_2_epa": 0.7134,
        "post_epa": 68.02,
    }
    test_sb = Mock()
    test_sb.get_team_match = MagicMock(return_value=sampleoutput1)
    assert statbotics_communicator.sb_get_team_match(254, "2023cc_qm7", sb=test_sb) == sampleoutput1
    test_sb.get_team_match = MagicMock(return_value=sampleoutput2)
    assert (
        statbotics_communicator.sb_get_team_match(1678, "2023cc_qm11", sb=test_sb) == sampleoutput2
    )


def test_sb_get_team_matches():
    sampleoutput1 = [
        {
            "team": 254,
            "year": 2023,
            "event": "2023cada",
            "match": "2023cada_qm6",
            "time": 1679763000,
            "offseason": False,
            "playoff": False,
            "alliance": "blue",
            "status": "Completed",
            "dq": False,
            "surrogate": False,
            "epa": 53.09,
            "auto_epa": 14.73,
            "teleop_epa": 24.67,
            "endgame_epa": 13.68,
            "rp_1_epa": 0.1294,
            "rp_2_epa": 0.3783,
            "post_epa": 57.93,
        }
    ]
    sampleoutput2 = [
        {
            "team": 1678,
            "year": 2023,
            "event": "2023caph",
            "match": "2023caph_qm4",
            "time": 1677950640,
            "offseason": False,
            "playoff": False,
            "alliance": "red",
            "status": "Completed",
            "dq": False,
            "surrogate": False,
            "epa": 53.62,
            "auto_epa": 14.88,
            "teleop_epa": 24.92,
            "endgame_epa": 13.81,
            "rp_1_epa": 0.1339,
            "rp_2_epa": 0.3828,
            "post_epa": 57.22,
        }
    ]
    test_sb = Mock()
    test_sb.get_team_matches = MagicMock(return_value=sampleoutput1)
    assert statbotics_communicator.sb_get_team_matches(254, sb=test_sb) == sampleoutput1
    test_sb.get_team_matches = MagicMock(return_value=sampleoutput2)
    assert statbotics_communicator.sb_get_team_matches(1678, sb=test_sb) == sampleoutput2

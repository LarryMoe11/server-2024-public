#!/usr/bin/env python3
import pytest
from unittest.mock import patch
from calculations import obj_team
from server import Server
from utils import dict_near_in, find_dict_near_index


@pytest.mark.clouddb
class TestOBJTeamCalc:
    def setup_method(self, method):
        with patch("server.Server.ask_calc_all_data", return_value=False):
            self.test_server = Server()
        self.test_calc = obj_team.OBJTeamCalc(self.test_server)

    def test___init__(self):
        """Test if attributes are set correctly"""
        assert self.test_calc.watched_collections == ["obj_tim", "subj_tim"]
        assert self.test_calc.server == self.test_server

    def test_averages(self):
        """Tests calculate_averages function from src/calculations/obj_team.py"""
        tims = [
            {
                "match_number": 1,
                "auto_speaker": 2,
                "auto_amp": 1,
                "auto_total_intakes": 2,
                "auto_total_pieces": 3,
                "tele_speaker": 5,
                "tele_speaker_amped": 5,
                "tele_amp": 2,
                "tele_intakes_amp": 0,
                "tele_intakes_center": 0,
                "tele_intakes_far": 0,
                "tele_intakes_poach": 0,
                "tele_shoot_other": 15,
                "tele_total_intakes": 2,
                "tele_total_pieces": 1,
                "driver_ability": 5,
                "trap": 3,
                "incap_time": 4,
                "failed_score": 12,
                "failed_score_trap": 1,
                "failed_score_speaker": 1,
                "failed_score_amp": 1,
                "total_intakes": 1,
                "total_pieces": 3,
            },
            {
                "match_number": 2,
                "auto_speaker": 4,
                "auto_amp": 0,
                "auto_total_intakes": 11,
                "auto_total_pieces": 0,
                "tele_speaker": 5,
                "tele_speaker_amped": 6,
                "tele_amp": 3,
                "tele_intakes_amp": 1,
                "tele_intakes_center": 1,
                "tele_intakes_far": 1,
                "tele_intakes_poach": 1,
                "tele_shoot_other": 16,
                "tele_total_intakes": 3,
                "tele_total_pieces": 2,
                "driver_ability": 6,
                "trap": 4,
                "incap_time": 5,
                "failed_score": 13,
                "failed_score_trap": 1,
                "failed_score_speaker": 1,
                "failed_score_amp": 1,
                "total_intakes": 2,
                "total_pieces": 4,
            },
            {
                "match_number": 3,
                "auto_speaker": 5,
                "auto_amp": 1,
                "auto_total_intakes": 12,
                "auto_total_pieces": 1,
                "tele_speaker": 6,
                "tele_speaker_amped": 7,
                "tele_amp": 4,
                "tele_intakes_amp": 2,
                "tele_intakes_center": 2,
                "tele_intakes_far": 2,
                "tele_intakes_poach": 2,
                "tele_shoot_other": 17,
                "tele_total_intakes": 4,
                "tele_total_pieces": 3,
                "driver_ability": 7,
                "trap": 3,
                "incap_time": 6,
                "failed_score": 14,
                "failed_score_trap": 1,
                "failed_score_speaker": 1,
                "failed_score_amp": 1,
                "total_intakes": 3,
                "total_pieces": 5,
            },
            {
                "match_number": 4,
                "auto_speaker": 6,
                "auto_amp": 2,
                "auto_total_intakes": 13,
                "auto_total_pieces": 2,
                "tele_speaker": 7,
                "tele_speaker_amped": 8,
                "tele_amp": 5,
                "tele_intakes_amp": 3,
                "tele_intakes_center": 3,
                "tele_intakes_far": 3,
                "tele_intakes_poach": 3,
                "tele_shoot_other": 18,
                "tele_total_intakes": 5,
                "tele_total_pieces": 4,
                "driver_ability": 8,
                "trap": 4,
                "incap_time": 7,
                "failed_score": 15,
                "failed_score_trap": 1,
                "failed_score_speaker": 1,
                "failed_score_amp": 1,
                "total_intakes": 4,
                "total_pieces": 6,
            },
            {
                "match_number": 5,
                "auto_speaker": 7,
                "auto_amp": 3,
                "auto_total_intakes": 14,
                "auto_total_pieces": 3,
                "tele_speaker": 8,
                "tele_speaker_amped": 9,
                "tele_amp": 6,
                "tele_intakes_amp": 4,
                "tele_intakes_center": 4,
                "tele_intakes_far": 4,
                "tele_intakes_poach": 4,
                "tele_shoot_other": 19,
                "tele_total_intakes": 6,
                "tele_total_pieces": 5,
                "driver_ability": 9,
                "trap": 5,
                "incap_time": 8,
                "failed_score": 16,
                "failed_score_trap": 1,
                "failed_score_speaker": 1,
                "failed_score_amp": 1,
                "total_intakes": 5,
                "total_pieces": 7,
            },
        ]

        expected_output = {
            "auto_avg_speaker": 4.8,
            "auto_avg_amp": 1.4,
            "auto_avg_total_intakes": 10.4,
            "auto_avg_total_pieces": 1.8,
            "tele_avg_speaker": 6.2,
            "tele_avg_speaker_amped": 7.0,
            "tele_avg_amp": 4.0,
            "tele_avg_intakes_amp": 2.0,
            "tele_avg_intakes_center": 2.0,
            "tele_avg_intakes_far": 2.0,
            "tele_avg_intakes_poach": 2.0,
            "tele_avg_shoot_other": 17.0,
            "tele_avg_total_intakes": 4.0,
            "tele_avg_total_pieces": 3.0,
            "avg_driver_ability": 7.0,
            "avg_trap": 3.8,
            "avg_incap_time": 6.0,
            "avg_failed_score_trap": 1.0,
            "avg_failed_score_amp": 1.0,
            "avg_failed_score_speaker": 1.0,
            "avg_total_intakes": 3.0,
            "avg_total_pieces": 5.0,
            "lfm_auto_avg_speaker": 5.5,
            "lfm_auto_avg_amp": 1.5,
            "lfm_auto_avg_total_intakes": 12.5,
            "lfm_auto_avg_total_pieces": 1.5,
            "lfm_tele_avg_speaker": 6.5,
            "lfm_tele_avg_speaker_amped": 7.5,
            "lfm_tele_avg_amp": 4.5,
            "lfm_tele_avg_intakes_amp": 2.5,
            "lfm_tele_avg_intakes_center": 2.5,
            "lfm_tele_avg_intakes_far": 2.5,
            "lfm_tele_avg_intakes_poach": 2.5,
            "lfm_tele_avg_shoot_other": 17.5,
            "lfm_tele_avg_total_intakes": 4.5,
            "lfm_tele_avg_total_pieces": 3.5,
            "lfm_avg_driver_ability": 7.5,
            "lfm_avg_trap": 4.0,
            "lfm_avg_incap_time": 6.5,
            "lfm_avg_failed_scores": 14.5,
            "lfm_avg_failed_score_trap": 1.0,
            "lfm_avg_failed_score_amp": 1.0,
            "lfm_avg_failed_score_speaker": 1.0,
            "lfm_avg_total_intakes": 3.5,
            "lfm_avg_total_pieces": 5.5,
        }
        lfm_tims = [tim for tim in tims if tim["match_number"] > 1]
        action_counts = self.test_calc.get_action_counts(tims)
        lfm_action_counts = self.test_calc.get_action_counts(lfm_tims)
        assert (
            self.test_calc.calculate_averages(action_counts, lfm_action_counts) == expected_output
        )

    def test_standard_deviations(self):
        """Tests calculate_standard_deviations function from src/calculations/obj_team.py"""
        tims = [
            {
                "match_number": 1,
                "auto_speaker": 2,
                "auto_amp": 1,
                "auto_total_intakes": 2,
                "auto_total_pieces": 3,
                "tele_speaker": 5,
                "tele_speaker_amped": 5,
                "tele_amp": 2,
                "tele_intakes_amp": 0,
                "tele_intakes_center": 0,
                "tele_intakes_far": 0,
                "tele_intakes_poach": 0,
                "tele_shoot_other": 15,
                "tele_total_intakes": 2,
                "tele_total_pieces": 1,
                "driver_ability": 5,
                "trap": 3,
                "incap_time": 4,
                "failed_score": 12,
                "failed_score_trap": 1,
                "failed_score_speaker": 1,
                "failed_score_amp": 1,
                "total_intakes": 1,
                "total_pieces": 3,
            },
            {
                "match_number": 2,
                "auto_speaker": 4,
                "auto_amp": 1,
                "auto_total_intakes": 11,
                "auto_total_pieces": 0,
                "tele_speaker": 5,
                "tele_speaker_amped": 6,
                "tele_amp": 3,
                "tele_intakes_amp": 1,
                "tele_intakes_center": 1,
                "tele_intakes_far": 1,
                "tele_intakes_poach": 1,
                "tele_shoot_other": 16,
                "tele_total_intakes": 3,
                "tele_total_pieces": 2,
                "driver_ability": 6,
                "trap": 4,
                "incap_time": 5,
                "failed_score": 13,
                "failed_score_trap": 1,
                "failed_score_speaker": 1,
                "failed_score_amp": 1,
                "total_intakes": 2,
                "total_pieces": 4,
            },
            {
                "match_number": 3,
                "auto_speaker": 5,
                "auto_amp": 1,
                "auto_total_intakes": 12,
                "auto_total_pieces": 1,
                "tele_speaker": 6,
                "tele_speaker_amped": 7,
                "tele_amp": 4,
                "tele_intakes_amp": 2,
                "tele_intakes_center": 2,
                "tele_intakes_far": 2,
                "tele_intakes_poach": 2,
                "tele_shoot_other": 17,
                "tele_total_intakes": 4,
                "tele_total_pieces": 3,
                "driver_ability": 7,
                "trap": 3,
                "incap_time": 6,
                "failed_score": 14,
                "failed_score_trap": 1,
                "failed_score_speaker": 1,
                "failed_score_amp": 1,
                "total_intakes": 3,
                "total_pieces": 5,
            },
            {
                "match_number": 4,
                "auto_speaker": 6,
                "auto_amp": 1,
                "auto_total_intakes": 13,
                "auto_total_pieces": 2,
                "tele_speaker": 7,
                "tele_speaker_amped": 8,
                "tele_amp": 5,
                "tele_intakes_amp": 3,
                "tele_intakes_center": 3,
                "tele_intakes_far": 3,
                "tele_intakes_poach": 3,
                "tele_shoot_other": 18,
                "tele_total_intakes": 5,
                "tele_total_pieces": 4,
                "driver_ability": 8,
                "trap": 4,
                "incap_time": 7,
                "failed_score": 15,
                "failed_score_trap": 1,
                "failed_score_speaker": 1,
                "failed_score_amp": 1,
                "total_intakes": 4,
                "total_pieces": 6,
            },
            {
                "match_number": 5,
                "auto_speaker": 7,
                "auto_amp": 2,
                "auto_total_intakes": 14,
                "auto_total_pieces": 3,
                "tele_speaker": 8,
                "tele_speaker_amped": 9,
                "tele_amp": 6,
                "tele_intakes_amp": 4,
                "tele_intakes_center": 4,
                "tele_intakes_far": 4,
                "tele_intakes_poach": 4,
                "tele_shoot_other": 19,
                "tele_total_intakes": 6,
                "tele_total_pieces": 5,
                "driver_ability": 9,
                "trap": 5,
                "incap_time": 8,
                "failed_score": 16,
                "failed_score_trap": 1,
                "failed_score_speaker": 1,
                "failed_score_amp": 1,
                "total_intakes": 5,
                "total_pieces": 7,
            },
        ]

        expected_output = {
            "auto_sd_speaker": 1.7204650534085253,
            "auto_sd_amp": 0.4,
            "auto_sd_total_intakes": 4.317406628984581,
            "auto_sd_total_pieces": 1.1661903789690602,
            "tele_sd_speaker": 1.1661903789690602,
            "tele_sd_speaker_amped": 1.4142135623730951,
            "tele_sd_amp": 1.4142135623730951,
            "tele_sd_intakes_amp": 1.4142135623730951,
            "tele_sd_intakes_center": 1.4142135623730951,
            "tele_sd_intakes_far": 1.4142135623730951,
            "tele_sd_intakes_poach": 1.4142135623730951,
            "tele_sd_shoot_other": 1.4142135623730951,
            "tele_sd_total_intakes": 1.4142135623730951,
            "tele_sd_total_pieces": 1.4142135623730951,
            "sd_trap": 0.7483314773547883,
            "sd_incap_time": 1.4142135623730951,
            "sd_failed_score_trap": 0.0,
            "sd_failed_score_speaker": 0.0,
            "sd_failed_score_amp": 0.0,
            "sd_total_intakes": 1.4142135623730951,
            "sd_total_pieces": 1.4142135623730951,
            "lfm_auto_sd_total_pieces": 1.118033988749895,
            "lfm_tele_sd_total_pieces": 1.118033988749895,
        }
        action_counts = self.test_calc.get_action_counts(tims)
        lfm_action_counts = self.test_calc.get_action_counts(
            [tim for tim in tims if tim["match_number"] > 1]
        )
        standard_deviations = self.test_calc.calculate_standard_deviations(
            action_counts, lfm_action_counts
        )
        assert (
            # Rounds every value in standard_deviations and expected_output to the 12th decimal point
            {key: round(standard_deviations[key], 12) for key in standard_deviations}
            == {key: round(expected_output[key], 12) for key in expected_output}
        )

    def test_counts(self):
        """Tests calculate_counts function from src/calculations/obj_team.py"""
        tims = [
            {
                "start_position": "1",
                "stage_level": "O",
                "has_preload": True,
                "match_number": 1,
                "incap_time": 0,
            },
            {
                "start_position": "2",
                "stage_level": "P",
                "has_preload": True,
                "incap_time": 0,
                "match_number": 2,
            },
            {
                "start_position": "2",
                "stage_level": "O",
                "has_preload": True,
                "match_number": 3,
                "incap_time": 1,
            },
            {
                "start_position": "0",
                "stage_level": "N",
                "has_preload": False,
                "match_number": 4,
                "incap_time": 0,
            },
            {
                "start_position": "2",
                "stage_level": "F",
                "has_preload": True,
                "match_number": 5,
                "incap_time": 0,
            },
        ]
        lfm_tims = [tim for tim in tims if tim["match_number"] > 1]

        expected_output = {
            "endgame_attempts": 4,
            "onstage_successes": 2,
            "onstage_attempts": 3,
            "parks": 1,
            "stage_fails": 1,
            "position_zero_starts": 1,
            "position_one_starts": 1,
            "position_two_starts": 3,
            "position_three_starts": 0,
            "preloaded_starts": 4,
            "matches_incap": 1,
            "matches_played": 5,
            "lfm_endgame_attempts": 3,
            "lfm_onstage_successes": 1,
            "lfm_onstage_attempts": 2,
            "lfm_parks": 1,
            "lfm_stage_fails": 1,
            "lfm_position_zero_starts": 1,
            "lfm_position_one_starts": 0,
            "lfm_position_two_starts": 3,
            "lfm_position_three_starts": 0,
            "lfm_preloaded_starts": 3,
            "lfm_matches_incap": 1,
        }
        assert self.test_calc.calculate_counts(tims, lfm_tims) == expected_output

    def test_super_counts(self):
        """Tests calculate_super_counts function from src/calculations.obj_team.py"""
        tims = [
            {
                "match_number": 1,
                "team_number": "1678",
                "was_tippy": True,
                "played_defense": True,
                "climb_after": False,
            },
            {
                "match_number": 2,
                "team_number": "1678",
                "was_tippy": False,
                "played_defense": True,
                "climb_after": True,
            },
            {
                "match_number": 3,
                "team_number": "1678",
                "was_tippy": False,
                "played_defense": False,
                "climb_after": True,
            },
            {
                "match_number": 4,
                "team_number": "1678",
                "was_tippy": True,
                "played_defense": False,
                "climb_after": True,
            },
            {
                "match_number": 5,
                "team_number": "1678",
                "was_tippy": True,
                "played_defense": True,
                "climb_after": True,
            },
        ]
        expected_output = {
            "matches_tippy": 3,
            "matches_played_defense": 3,
            "matches_climb_after": 4,
            "lfm_matches_tippy": 2,
            "lfm_matches_played_defense": 2,
            "lfm_matches_climb_after": 4,
        }
        lfm_tims = [tim for tim in tims if tim["match_number"] > 1]
        assert self.test_calc.calculate_super_counts(tims, lfm_tims) == expected_output

    def test_extrema(self):
        tims = [
            {
                "match_number": 1,
                "auto_speaker": 2,
                "auto_amp": 1,
                "auto_total_intakes": 2,
                "auto_total_pieces": 3,
                "tele_speaker": 5,
                "tele_speaker_amped": 5,
                "tele_amp": 2,
                "tele_intakes_amp": 0,
                "tele_intakes_center": 0,
                "tele_intakes_far": 0,
                "tele_intakes_poach": 0,
                "tele_shoot_other": 15,
                "tele_total_intakes": 2,
                "tele_total_pieces": 1,
                "driver_ability": 5,
                "trap": 3,
                "incap_time": 4,
                "failed_score": 12,
                "total_intakes": 1,
                "total_pieces": 3,
                "failed_score_trap": 1,
                "failed_score_speaker": 1,
                "failed_score_amp": 1,
            },
            {
                "match_number": 2,
                "auto_speaker": 4,
                "auto_amp": 1,
                "auto_total_intakes": 11,
                "auto_total_pieces": 0,
                "tele_speaker": 5,
                "tele_speaker_amped": 6,
                "tele_amp": 3,
                "tele_intakes_amp": 1,
                "tele_intakes_center": 1,
                "tele_intakes_far": 1,
                "tele_intakes_poach": 1,
                "tele_shoot_other": 16,
                "tele_total_intakes": 3,
                "tele_total_pieces": 2,
                "driver_ability": 6,
                "trap": 4,
                "incap_time": 5,
                "failed_score": 13,
                "total_intakes": 2,
                "total_pieces": 4,
                "failed_score_trap": 1,
                "failed_score_speaker": 1,
                "failed_score_amp": 1,
            },
            {
                "match_number": 3,
                "auto_speaker": 5,
                "auto_amp": 1,
                "auto_total_intakes": 12,
                "auto_total_pieces": 1,
                "tele_speaker": 6,
                "tele_speaker_amped": 7,
                "tele_amp": 4,
                "tele_intakes_amp": 2,
                "tele_intakes_center": 2,
                "tele_intakes_far": 2,
                "tele_intakes_poach": 2,
                "tele_shoot_other": 17,
                "tele_total_intakes": 4,
                "tele_total_pieces": 3,
                "driver_ability": 7,
                "trap": 3,
                "incap_time": 6,
                "failed_score": 14,
                "total_intakes": 3,
                "total_pieces": 5,
                "failed_score_trap": 1,
                "failed_score_speaker": 1,
                "failed_score_amp": 1,
            },
            {
                "match_number": 4,
                "auto_speaker": 6,
                "auto_amp": 1,
                "auto_total_intakes": 13,
                "auto_total_pieces": 2,
                "tele_speaker": 7,
                "tele_speaker_amped": 8,
                "tele_amp": 5,
                "tele_intakes_amp": 3,
                "tele_intakes_center": 3,
                "tele_intakes_far": 3,
                "tele_intakes_poach": 3,
                "tele_shoot_other": 18,
                "tele_total_intakes": 5,
                "tele_total_pieces": 4,
                "driver_ability": 8,
                "trap": 4,
                "incap_time": 7,
                "failed_score": 15,
                "total_intakes": 4,
                "total_pieces": 6,
                "failed_score_trap": 1,
                "failed_score_speaker": 1,
                "failed_score_amp": 1,
            },
            {
                "match_number": 5,
                "auto_speaker": 7,
                "auto_amp": 2,
                "auto_total_intakes": 14,
                "auto_total_pieces": 3,
                "tele_speaker": 8,
                "tele_speaker_amped": 9,
                "tele_amp": 6,
                "tele_intakes_amp": 4,
                "tele_intakes_center": 4,
                "tele_intakes_far": 4,
                "tele_intakes_poach": 4,
                "tele_shoot_other": 19,
                "tele_total_intakes": 6,
                "tele_total_pieces": 5,
                "driver_ability": 9,
                "trap": 5,
                "incap_time": 8,
                "failed_score": 16,
                "total_intakes": 5,
                "total_pieces": 7,
                "failed_score_trap": 1,
                "failed_score_speaker": 1,
                "failed_score_amp": 1,
            },
        ]
        lfm_tims = [tim for tim in tims if tim["match_number"] > 1]
        action_counts = self.test_calc.get_action_counts(tims)
        lfm_action_counts = self.test_calc.get_action_counts(lfm_tims)
        expected_output = {
            "auto_max_speaker": 7,
            "auto_max_amp": 2,
            "auto_max_total_intakes": 14,
            "auto_max_total_pieces": 3,
            "tele_max_speaker": 8,
            "tele_max_speaker_amped": 9,
            "tele_max_amp": 6,
            "tele_max_shoot_other": 19,
            "tele_max_total_intakes": 6,
            "tele_max_total_pieces": 5,
            "max_trap": 5,
            "max_incap_time": 8,
            "max_failed_scores": 16,
            "max_total_intakes": 5,
            "max_total_pieces": 7,
            "lfm_auto_max_speaker": 7,
            "lfm_auto_max_amp": 2,
            "lfm_auto_max_total_intakes": 14,
            "lfm_auto_max_total_pieces": 3,
            "lfm_tele_max_speaker": 8,
            "lfm_tele_max_speaker_amped": 9,
            "lfm_tele_max_amp": 6,
            "lfm_tele_max_shoot_other": 19,
            "lfm_tele_max_total_intakes": 6,
            "lfm_tele_max_total_pieces": 5,
            "lfm_max_trap": 5,
            "lfm_max_incap_time": 8,
            "lfm_max_failed_scores": 16,
            "lfm_max_total_intakes": 5,
            "lfm_max_total_pieces": 7,
        }
        assert (
            self.test_calc.calculate_extrema(
                action_counts,
                lfm_action_counts,
            )
            == expected_output
        )

    def test_medians(self):
        tims = [
            {"match_number": 1, "incap_time": 0},
            {"match_number": 2, "incap_time": 0},
            {"match_number": 3, "incap_time": 30},
            {"match_number": 4, "incap_time": 49},
            {"match_number": 5, "incap_time": 80},
            {"match_number": 6, "incap_time": 120},
            {"match_number": 7, "incap_time": 130},
        ]

        expected_output = {
            "median_nonzero_incap_time": 80,
            "lfm_median_nonzero_incap_time": 100,
        }

        lfm_tims = [tim for tim in tims if tim["match_number"] > (len(tims) - 4)]
        action_sum = self.test_calc.get_action_sum(tims)
        lfm_action_sum = self.test_calc.get_action_sum(lfm_tims)
        assert (
            self.test_calc.calculate_medians(
                action_sum,
                lfm_action_sum,
            )
        ) == expected_output

    def test_modes(self):
        tims = [
            {
                "match_number": 1,
                "start_position": "3",
                "stage_level": "F"
                # NFPO
            },
            {"match_number": 2, "start_position": "0", "stage_level": "O"},
            {"match_number": 3, "start_position": "3", "stage_level": "O"},
            {"match_number": 4, "start_position": "1", "stage_level": "N"},
            {"match_number": 5, "start_position": "3", "stage_level": "P"},
            {"match_number": 6, "start_position": "0", "stage_level": "F"},
            {"match_number": 7, "start_position": "2", "stage_level": "F"},
            {"match_number": 8, "start_position": "1", "stage_level": "O"},
            {"match_number": 9, "start_position": "2", "stage_level": "P"},
            {"match_number": 10, "start_position": "3", "stage_level": "F"},
            {"match_number": 11, "start_position": "2", "stage_level": "F"},
        ]
        lfm_tims = [tim for tim in tims if tim["match_number"] > 2]
        action_categories = self.test_calc.get_action_categories(tims)
        lfm_action_categories = self.test_calc.get_action_categories(lfm_tims)
        assert self.test_calc.calculate_modes(action_categories, lfm_action_categories) == {
            "mode_start_position": ["3"],
            "lfm_mode_start_position": ["3", "2"],
            "mode_stage_level": ["F"],
            "lfm_mode_stage_level": ["F"],
        }

    def test_success_rates(self):
        team_data = {
            "matches_played": 5,
            "matches_tippy": 2,
            "onstage_attempts": 8,
            "onstage_successes": 4,
            "endgame_attempts": 6,
            "parks": 2,
            "lfm_onstage_attempts": 6,
            "lfm_onstage_successes": 4,
        }
        assert self.test_calc.calculate_success_rates(team_data) == {
            "onstage_percent_success": 0.5,
            "lfm_onstage_percent_success": 0.66666666666666666666666666666,
            "onstage_percent": 0.66666666666666666666666666,
            "park_percent": 0.3333333333333333,
        }

    def test_calculate_sums(self):
        team_data = {
            "auto_avg_amp": 2,
            "auto_avg_speaker": 2,
            "tele_avg_amp": 2,
            "tele_avg_speaker": 2,
            "tele_avg_speaker_amped": 2,
            "onstage_percent": 0.5,
            "park_percent": 0.2,
            "avg_trap": 1,
        }
        obj_tims = [
            {
                "incap_time": 5,
            },
            {
                "incap_time": 4,
            },
            {
                "incap_time": 5,
            },
            {
                "incap_time": 7,
            },
            {
                "incap_time": 3,
            },
            {
                "incap_time": 2,
            },
        ]
        obj_lfm_tims = obj_tims[-4:]
        assert self.test_calc.calculate_sums(team_data, obj_tims, obj_lfm_tims) == {
            "auto_avg_total_points": 14,
            "avg_endgame_points": 6.9,
            "tele_avg_total_points": 16,
            "avg_total_points": 36.9,
            "total_incap": 26,
            "lfm_total_incap": 17,
        }

    def test_run(self):
        """Tests run function from src/calculations/obj_team.py"""
        subj_tims = [
            {
                "match_number": 1,
                "team_number": "973",
                "was_tippy": True,
                "played_defense": True,
                "climb_after": False,
            },
            {
                "match_number": 2,
                "team_number": "973",
                "was_tippy": True,
                "played_defense": True,
                "climb_after": True,
            },
            {
                "match_number": 3,
                "team_number": "973",
                "was_tippy": False,
                "played_defense": False,
                "climb_after": True,
            },
            {
                "match_number": 4,
                "team_number": "973",
                "was_tippy": True,
                "played_defense": True,
                "climb_after": True,
            },
            {
                "match_number": 5,
                "team_number": "973",
                "was_tippy": False,
                "played_defense": False,
                "climb_after": True,
            },
            {
                "match_number": 1,
                "team_number": "1678",
                "was_tippy": True,
                "played_defense": True,
                "climb_after": False,
            },
            {
                "match_number": 2,
                "team_number": "1678",
                "was_tippy": True,
                "played_defense": True,
                "climb_after": True,
            },
            {
                "match_number": 3,
                "team_number": "1678",
                "was_tippy": False,
                "played_defense": False,
                "climb_after": True,
            },
            {
                "match_number": 4,
                "team_number": "1678",
                "was_tippy": True,
                "played_defense": True,
                "climb_after": True,
            },
            {
                "match_number": 5,
                "team_number": "1678",
                "was_tippy": False,
                "played_defense": False,
                "climb_after": True,
            },
        ]
        obj_tims = [
            # 973
            {
                "team_number": "973",
                "match_number": 1,
                "auto_speaker": 2,
                "auto_amp": 1,
                "auto_total_intakes": 2,
                "auto_total_pieces": 3,
                "tele_speaker": 5,
                "tele_speaker_amped": 5,
                "tele_amp": 2,
                "tele_intakes_amp": 0,
                "tele_intakes_center": 0,
                "tele_intakes_far": 0,
                "tele_intakes_poach": 0,
                "tele_shoot_other": 15,
                "tele_total_intakes": 2,
                "tele_total_pieces": 1,
                "driver_ability": 5,
                "trap": 3,
                "incap_time": 4,
                "failed_score": 12,
                "failed_score_trap": 1,
                "failed_score_speaker": 1,
                "failed_score_amp": 1,
                "total_intakes": 1,
                "total_pieces": 3,
                "start_position": "1",
                "stage_level": "O",
                "has_preload": True,
                "incap_time": 0,
            },
            {
                "team_number": "973",
                "match_number": 2,
                "auto_speaker": 4,
                "auto_amp": 0,
                "auto_total_intakes": 11,
                "auto_total_pieces": 0,
                "tele_speaker": 5,
                "tele_speaker_amped": 6,
                "tele_amp": 3,
                "tele_intakes_amp": 1,
                "tele_intakes_center": 1,
                "tele_intakes_far": 1,
                "tele_intakes_poach": 1,
                "tele_shoot_other": 16,
                "tele_total_intakes": 3,
                "tele_total_pieces": 2,
                "driver_ability": 6,
                "trap": 4,
                "incap_time": 5,
                "failed_score": 13,
                "failed_score_trap": 1,
                "failed_score_speaker": 1,
                "failed_score_amp": 1,
                "total_intakes": 2,
                "total_pieces": 4,
                "start_position": "2",
                "stage_level": "P",
                "has_preload": True,
                "incap_time": 0,
            },
            {
                "team_number": "973",
                "match_number": 3,
                "auto_speaker": 5,
                "auto_amp": 1,
                "auto_total_intakes": 12,
                "auto_total_pieces": 1,
                "tele_speaker": 6,
                "tele_speaker_amped": 7,
                "tele_amp": 4,
                "tele_intakes_amp": 2,
                "tele_intakes_center": 2,
                "tele_intakes_far": 2,
                "tele_intakes_poach": 2,
                "tele_shoot_other": 17,
                "tele_total_intakes": 4,
                "tele_total_pieces": 3,
                "driver_ability": 7,
                "trap": 3,
                "incap_time": 6,
                "failed_score": 14,
                "failed_score_trap": 1,
                "failed_score_speaker": 1,
                "failed_score_amp": 1,
                "total_intakes": 3,
                "total_pieces": 5,
                "start_position": "2",
                "stage_level": "O",
                "has_preload": True,
                "incap_time": 1,
            },
            {
                "team_number": "973",
                "match_number": 4,
                "auto_speaker": 6,
                "auto_amp": 2,
                "auto_total_intakes": 13,
                "auto_total_pieces": 2,
                "tele_speaker": 7,
                "tele_speaker_amped": 8,
                "tele_amp": 5,
                "tele_intakes_amp": 3,
                "tele_intakes_center": 3,
                "tele_intakes_far": 3,
                "tele_intakes_poach": 3,
                "tele_shoot_other": 18,
                "tele_total_intakes": 5,
                "tele_total_pieces": 4,
                "driver_ability": 8,
                "trap": 4,
                "incap_time": 7,
                "failed_score": 15,
                "failed_score_trap": 1,
                "failed_score_speaker": 1,
                "failed_score_amp": 1,
                "total_intakes": 4,
                "total_pieces": 6,
                "start_position": "0",
                "stage_level": "N",
                "has_preload": False,
                "incap_time": 0,
            },
            {
                "team_number": "973",
                "match_number": 5,
                "auto_speaker": 7,
                "auto_amp": 3,
                "auto_total_intakes": 14,
                "auto_total_pieces": 3,
                "tele_speaker": 8,
                "tele_speaker_amped": 9,
                "tele_amp": 6,
                "tele_intakes_amp": 4,
                "tele_intakes_center": 4,
                "tele_intakes_far": 4,
                "tele_intakes_poach": 4,
                "tele_shoot_other": 19,
                "tele_total_intakes": 6,
                "tele_total_pieces": 5,
                "driver_ability": 9,
                "trap": 5,
                "incap_time": 8,
                "failed_score": 16,
                "failed_score_trap": 1,
                "failed_score_speaker": 1,
                "failed_score_amp": 1,
                "total_intakes": 5,
                "total_pieces": 7,
                "start_position": "2",
                "stage_level": "F",
                "has_preload": True,
                "incap_time": 0,
            },
            {
                "team_number": "1678",
                "match_number": 1,
                "auto_speaker": 2,
                "auto_amp": 1,
                "auto_total_intakes": 2,
                "auto_total_pieces": 3,
                "tele_speaker": 5,
                "tele_speaker_amped": 5,
                "tele_amp": 2,
                "tele_intakes_amp": 0,
                "tele_intakes_center": 0,
                "tele_intakes_far": 0,
                "tele_intakes_poach": 0,
                "tele_shoot_other": 15,
                "tele_total_intakes": 2,
                "tele_total_pieces": 1,
                "driver_ability": 5,
                "trap": 3,
                "incap_time": 4,
                "failed_score": 12,
                "failed_score_trap": 1,
                "failed_score_speaker": 1,
                "failed_score_amp": 1,
                "total_intakes": 1,
                "total_pieces": 3,
                "start_position": "1",
                "stage_level": "O",
                "has_preload": True,
                "incap_time": 0,
            },
            {
                "team_number": "1678",
                "match_number": 2,
                "auto_speaker": 4,
                "auto_amp": 0,
                "auto_total_intakes": 11,
                "auto_total_pieces": 0,
                "tele_speaker": 5,
                "tele_speaker_amped": 6,
                "tele_amp": 3,
                "tele_intakes_amp": 1,
                "tele_intakes_center": 1,
                "tele_intakes_far": 1,
                "tele_intakes_poach": 1,
                "tele_shoot_other": 16,
                "tele_total_intakes": 3,
                "tele_total_pieces": 2,
                "driver_ability": 6,
                "trap": 4,
                "incap_time": 5,
                "failed_score": 13,
                "failed_score_trap": 1,
                "failed_score_speaker": 1,
                "failed_score_amp": 1,
                "total_intakes": 2,
                "total_pieces": 4,
                "start_position": "2",
                "stage_level": "P",
                "has_preload": True,
                "incap_time": 0,
            },
            {
                "team_number": "1678",
                "match_number": 3,
                "auto_speaker": 5,
                "auto_amp": 1,
                "auto_total_intakes": 12,
                "auto_total_pieces": 1,
                "tele_speaker": 6,
                "tele_speaker_amped": 7,
                "tele_amp": 4,
                "tele_intakes_amp": 2,
                "tele_intakes_center": 2,
                "tele_intakes_far": 2,
                "tele_intakes_poach": 2,
                "tele_shoot_other": 17,
                "tele_total_intakes": 4,
                "tele_total_pieces": 3,
                "driver_ability": 7,
                "trap": 3,
                "incap_time": 6,
                "failed_score": 14,
                "failed_score_trap": 1,
                "failed_score_speaker": 1,
                "failed_score_amp": 1,
                "total_intakes": 3,
                "total_pieces": 5,
                "start_position": "2",
                "stage_level": "O",
                "has_preload": True,
                "incap_time": 1,
            },
            {
                "team_number": "1678",
                "match_number": 4,
                "auto_speaker": 6,
                "auto_amp": 2,
                "auto_total_intakes": 13,
                "auto_total_pieces": 2,
                "tele_speaker": 7,
                "tele_speaker_amped": 8,
                "tele_amp": 5,
                "tele_intakes_amp": 3,
                "tele_intakes_center": 3,
                "tele_intakes_far": 3,
                "tele_intakes_poach": 3,
                "tele_shoot_other": 18,
                "tele_total_intakes": 5,
                "tele_total_pieces": 4,
                "driver_ability": 8,
                "trap": 4,
                "incap_time": 7,
                "failed_score": 15,
                "failed_score_trap": 1,
                "failed_score_speaker": 1,
                "failed_score_amp": 1,
                "total_intakes": 4,
                "total_pieces": 6,
                "start_position": "0",
                "stage_level": "N",
                "has_preload": False,
                "incap_time": 0,
            },
            {
                "team_number": "1678",
                "match_number": 5,
                "auto_speaker": 7,
                "auto_amp": 3,
                "auto_total_intakes": 14,
                "auto_total_pieces": 3,
                "tele_speaker": 8,
                "tele_speaker_amped": 9,
                "tele_amp": 6,
                "tele_intakes_amp": 4,
                "tele_intakes_center": 4,
                "tele_intakes_far": 4,
                "tele_intakes_poach": 4,
                "tele_shoot_other": 19,
                "tele_total_intakes": 6,
                "tele_total_pieces": 5,
                "driver_ability": 9,
                "trap": 5,
                "incap_time": 8,
                "failed_score": 16,
                "failed_score_trap": 1,
                "failed_score_speaker": 1,
                "failed_score_amp": 1,
                "total_intakes": 5,
                "total_pieces": 7,
                "start_position": "2",
                "stage_level": "F",
                "has_preload": True,
                "incap_time": 0,
            },
        ]
        expected_results = [
            {
                "team_number": "973",
                # Averages
                "auto_avg_speaker": 4.8,
                "auto_avg_amp": 1.4,
                "auto_avg_total_intakes": 10.4,
                "auto_avg_total_pieces": 1.8,
                "tele_avg_speaker": 6.2,
                "tele_avg_speaker_amped": 7.0,
                "tele_avg_amp": 4.0,
                "tele_avg_intakes_amp": 2.0,
                "tele_avg_intakes_center": 2.0,
                "tele_avg_intakes_far": 2.0,
                "tele_avg_intakes_poach": 2.0,
                "tele_avg_shoot_other": 17.0,
                "tele_avg_total_intakes": 4.0,
                "tele_avg_total_pieces": 3.0,
                "avg_driver_ability": 7.0,
                "avg_trap": 3.8,
                "avg_incap_time": 0.2,
                "avg_failed_score_trap": 1.0,
                "avg_failed_score_amp": 1.0,
                "avg_failed_score_speaker": 1.0,
                "avg_total_intakes": 3.0,
                "avg_total_pieces": 5.0,
                # LFM Averages
                "lfm_auto_avg_speaker": 5.5,
                "lfm_auto_avg_amp": 1.5,
                "lfm_auto_avg_total_intakes": 12.5,
                "lfm_auto_avg_total_pieces": 1.5,
                "lfm_tele_avg_speaker": 6.5,
                "lfm_tele_avg_speaker_amped": 7.5,
                "lfm_tele_avg_amp": 4.5,
                "lfm_tele_avg_intakes_amp": 2.5,
                "lfm_tele_avg_intakes_center": 2.5,
                "lfm_tele_avg_intakes_far": 2.5,
                "lfm_tele_avg_intakes_poach": 2.5,
                "lfm_tele_avg_shoot_other": 17.5,
                "lfm_tele_avg_total_intakes": 4.5,
                "lfm_tele_avg_total_pieces": 3.5,
                "lfm_avg_driver_ability": 7.5,
                "lfm_avg_trap": 4.0,
                "lfm_avg_incap_time": 0.25,
                "lfm_avg_failed_scores": 14.5,
                "lfm_avg_failed_score_trap": 1.0,
                "lfm_avg_failed_score_amp": 1.0,
                "lfm_avg_failed_score_speaker": 1.0,
                "lfm_avg_total_intakes": 3.5,
                "lfm_avg_total_pieces": 5.5,
                # Standard Deviations
                "auto_sd_speaker": 1.7204650534085253,
                "auto_sd_amp": 1.019803902718557,
                "auto_sd_total_intakes": 4.317406628984581,
                "auto_sd_total_pieces": 1.1661903789690602,
                "tele_sd_speaker": 1.1661903789690602,
                "tele_sd_speaker_amped": 1.4142135623730951,
                "tele_sd_amp": 1.4142135623730951,
                "tele_sd_intakes_amp": 1.4142135623730951,
                "tele_sd_intakes_center": 1.4142135623730951,
                "tele_sd_intakes_far": 1.4142135623730951,
                "tele_sd_intakes_poach": 1.4142135623730951,
                "tele_sd_shoot_other": 1.4142135623730951,
                "tele_sd_total_intakes": 1.4142135623730951,
                "tele_sd_total_pieces": 1.4142135623730951,
                "sd_trap": 0.7483314773547883,
                "sd_incap_time": 0.4,
                "sd_failed_score_trap": 0.0,
                "sd_failed_score_speaker": 0.0,
                "sd_failed_score_amp": 0.0,
                "sd_total_intakes": 1.4142135623730951,
                "sd_total_pieces": 1.4142135623730951,
                # LFM Standard Deviations
                "lfm_auto_sd_total_pieces": 1.118033988749895,
                "lfm_tele_sd_total_pieces": 1.118033988749895,
                # Counts
                "endgame_attempts": 4,
                "onstage_successes": 2,
                "onstage_attempts": 3,
                "parks": 1,
                "stage_fails": 1,
                "position_zero_starts": 1,
                "position_one_starts": 1,
                "position_two_starts": 3,
                "position_three_starts": 0,
                "preloaded_starts": 4,
                "matches_incap": 1,
                "matches_played": 5,
                # LFM Counts
                "lfm_endgame_attempts": 3,
                "lfm_onstage_successes": 1,
                "lfm_onstage_attempts": 2,
                "lfm_parks": 1,
                "lfm_stage_fails": 1,
                "lfm_position_zero_starts": 1,
                "lfm_position_one_starts": 0,
                "lfm_position_two_starts": 3,
                "lfm_position_three_starts": 0,
                "lfm_preloaded_starts": 3,
                "lfm_matches_incap": 1,
                # Super Counts
                "matches_tippy": 3,
                "matches_played_defense": 3,
                "matches_climb_after": 4,
                # LFM Super Counts
                "lfm_matches_tippy": 2,
                "lfm_matches_played_defense": 2,
                "lfm_matches_climb_after": 4,
                # Extrema
                "auto_max_speaker": 7,
                "auto_max_amp": 3,
                "auto_max_total_intakes": 14,
                "auto_max_total_pieces": 3,
                "tele_max_speaker": 8,
                "tele_max_speaker_amped": 9,
                "tele_max_amp": 6,
                "tele_max_shoot_other": 19,
                "tele_max_total_intakes": 6,
                "tele_max_total_pieces": 5,
                "max_trap": 5,
                "max_incap_time": 1,
                "max_failed_scores": 16,
                "max_total_intakes": 5,
                "max_total_pieces": 7,
                # LFM Extrema
                "lfm_auto_max_speaker": 7,
                "lfm_auto_max_amp": 3,
                "lfm_auto_max_total_intakes": 14,
                "lfm_auto_max_total_pieces": 3,
                "lfm_tele_max_speaker": 8,
                "lfm_tele_max_speaker_amped": 9,
                "lfm_tele_max_amp": 6,
                "lfm_tele_max_shoot_other": 19,
                "lfm_tele_max_total_intakes": 6,
                "lfm_tele_max_total_pieces": 5,
                "lfm_max_trap": 5,
                "lfm_max_incap_time": 1,
                "lfm_max_failed_scores": 16,
                "lfm_max_total_intakes": 5,
                "lfm_max_total_pieces": 7,
                # Modes
                "mode_start_position": ["2"],
                "mode_stage_level": ["O"],
                # LFM Modes
                "lfm_mode_start_position": ["2"],
                "lfm_mode_stage_level": ["P", "O", "F"],
                # Medians
                "median_nonzero_incap_time": 1,
                # LFM Medians
                "lfm_median_nonzero_incap_time": 1,
                # Success Rates
                "onstage_percent_success": 0.666666666666666666,
                "onstage_percent": 0.5,
                "park_percent": 0.25,
                # LFM Success Rates
                "lfm_onstage_percent_success": 0.5,
                # Sums
                "auto_avg_total_points": 26.8,
                "tele_avg_total_points": 51.4,
                "avg_total_points": 99.2,
                "avg_endgame_points": 21.0,
                "total_incap": 1,
                # LFM Sums
                "lfm_total_incap": 1,
            },
            {
                "team_number": "1678",
                # Averages
                "auto_avg_speaker": 4.8,
                "auto_avg_amp": 1.4,
                "auto_avg_total_intakes": 10.4,
                "auto_avg_total_pieces": 1.8,
                "tele_avg_speaker": 6.2,
                "tele_avg_speaker_amped": 7.0,
                "tele_avg_amp": 4.0,
                "tele_avg_intakes_amp": 2.0,
                "tele_avg_intakes_center": 2.0,
                "tele_avg_intakes_far": 2.0,
                "tele_avg_intakes_poach": 2.0,
                "tele_avg_shoot_other": 17.0,
                "tele_avg_total_intakes": 4.0,
                "tele_avg_total_pieces": 3.0,
                "avg_driver_ability": 7.0,
                "avg_trap": 3.8,
                "avg_incap_time": 0.2,
                "avg_failed_score_trap": 1.0,
                "avg_failed_score_amp": 1.0,
                "avg_failed_score_speaker": 1.0,
                "avg_total_intakes": 3.0,
                "avg_total_pieces": 5.0,
                # LFM Averages
                "lfm_auto_avg_speaker": 5.5,
                "lfm_auto_avg_amp": 1.5,
                "lfm_auto_avg_total_intakes": 12.5,
                "lfm_auto_avg_total_pieces": 1.5,
                "lfm_tele_avg_speaker": 6.5,
                "lfm_tele_avg_speaker_amped": 7.5,
                "lfm_tele_avg_amp": 4.5,
                "lfm_tele_avg_intakes_amp": 2.5,
                "lfm_tele_avg_intakes_center": 2.5,
                "lfm_tele_avg_intakes_far": 2.5,
                "lfm_tele_avg_intakes_poach": 2.5,
                "lfm_tele_avg_shoot_other": 17.5,
                "lfm_tele_avg_total_intakes": 4.5,
                "lfm_tele_avg_total_pieces": 3.5,
                "lfm_avg_driver_ability": 7.5,
                "lfm_avg_trap": 4.0,
                "lfm_avg_incap_time": 0.25,
                "lfm_avg_failed_scores": 14.5,
                "lfm_avg_failed_score_trap": 1.0,
                "lfm_avg_failed_score_amp": 1.0,
                "lfm_avg_failed_score_speaker": 1.0,
                "lfm_avg_total_intakes": 3.5,
                "lfm_avg_total_pieces": 5.5,
                # Standard Deviations
                "auto_sd_speaker": 1.7204650534085253,
                "auto_sd_amp": 1.019803902718557,
                "auto_sd_total_intakes": 4.317406628984581,
                "auto_sd_total_pieces": 1.1661903789690602,
                "tele_sd_speaker": 1.1661903789690602,
                "tele_sd_speaker_amped": 1.4142135623730951,
                "tele_sd_amp": 1.4142135623730951,
                "tele_sd_intakes_amp": 1.4142135623730951,
                "tele_sd_intakes_center": 1.4142135623730951,
                "tele_sd_intakes_far": 1.4142135623730951,
                "tele_sd_intakes_poach": 1.4142135623730951,
                "tele_sd_shoot_other": 1.4142135623730951,
                "tele_sd_total_intakes": 1.4142135623730951,
                "tele_sd_total_pieces": 1.4142135623730951,
                "sd_trap": 0.7483314773547883,
                "sd_incap_time": 0.4,
                "sd_failed_score_trap": 0.0,
                "sd_failed_score_speaker": 0.0,
                "sd_failed_score_amp": 0.0,
                "sd_total_intakes": 1.4142135623730951,
                "sd_total_pieces": 1.4142135623730951,
                # LFM Standard Deviations
                "lfm_auto_sd_total_pieces": 1.118033988749895,
                "lfm_tele_sd_total_pieces": 1.118033988749895,
                # Counts
                "endgame_attempts": 4,
                "onstage_successes": 2,
                "onstage_attempts": 3,
                "parks": 1,
                "stage_fails": 1,
                "position_zero_starts": 1,
                "position_one_starts": 1,
                "position_two_starts": 3,
                "position_three_starts": 0,
                "preloaded_starts": 4,
                "matches_incap": 1,
                "matches_played": 5,
                # LFM Counts
                "lfm_endgame_attempts": 3,
                "lfm_onstage_successes": 1,
                "lfm_onstage_attempts": 2,
                "lfm_parks": 1,
                "lfm_stage_fails": 1,
                "lfm_position_zero_starts": 1,
                "lfm_position_one_starts": 0,
                "lfm_position_two_starts": 3,
                "lfm_position_three_starts": 0,
                "lfm_preloaded_starts": 3,
                "lfm_matches_incap": 1,
                # Super Counts
                "matches_tippy": 3,
                "matches_played_defense": 3,
                "matches_climb_after": 4,
                # LFM Super Counts
                "lfm_matches_tippy": 2,
                "lfm_matches_played_defense": 2,
                "lfm_matches_climb_after": 4,
                # Extrema
                "auto_max_speaker": 7,
                "auto_max_amp": 3,
                "auto_max_total_intakes": 14,
                "auto_max_total_pieces": 3,
                "tele_max_speaker": 8,
                "tele_max_speaker_amped": 9,
                "tele_max_amp": 6,
                "tele_max_shoot_other": 19,
                "tele_max_total_intakes": 6,
                "tele_max_total_pieces": 5,
                "max_trap": 5,
                "max_incap_time": 1,
                "max_failed_scores": 16,
                "max_total_intakes": 5,
                "max_total_pieces": 7,
                # LFM Extrema
                "lfm_auto_max_speaker": 7,
                "lfm_auto_max_amp": 3,
                "lfm_auto_max_total_intakes": 14,
                "lfm_auto_max_total_pieces": 3,
                "lfm_tele_max_speaker": 8,
                "lfm_tele_max_speaker_amped": 9,
                "lfm_tele_max_amp": 6,
                "lfm_tele_max_shoot_other": 19,
                "lfm_tele_max_total_intakes": 6,
                "lfm_tele_max_total_pieces": 5,
                "lfm_max_trap": 5,
                "lfm_max_incap_time": 1,
                "lfm_max_failed_scores": 16,
                "lfm_max_total_intakes": 5,
                "lfm_max_total_pieces": 7,
                # Modes
                "mode_start_position": ["2"],
                "mode_stage_level": ["O"],
                # LFM Modes
                "lfm_mode_start_position": ["2"],
                "lfm_mode_stage_level": ["P", "O", "F"],
                # Medians
                "median_nonzero_incap_time": 1,
                # LFM Medians
                "lfm_median_nonzero_incap_time": 1,
                # Success Rates
                "onstage_percent_success": 0.666666666666666666,
                "onstage_percent": 0.5,
                "park_percent": 0.25,
                # LFM Success Rates
                "lfm_onstage_percent_success": 0.5,
                # Sums
                "auto_avg_total_points": 26.8,
                "tele_avg_total_points": 51.4,
                "avg_total_points": 99.2,
                "avg_endgame_points": 21.0,
                "total_incap": 1,
                # LFM Sums
                "lfm_total_incap": 1,
            },
        ]
        self.test_server.db.insert_documents("obj_tim", obj_tims)
        self.test_server.db.insert_documents("subj_tim", subj_tims)
        self.test_calc.run()
        result = self.test_server.db.find("obj_team")
        assert len(result) == 2
        for document in result:
            del document["_id"]
            assert dict_near_in(document, expected_results)
            # Removes the matching expected result to protect against duplicates from the calculation
            expected_results.pop(find_dict_near_index(document, expected_results))
